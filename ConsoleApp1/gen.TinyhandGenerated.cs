using System;
using System.Runtime.CompilerServices;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591

namespace Tinyhand.Formatters
{
    static class Generated
    {
        internal static void SerializeArray_0000(ref TinyhandWriter writer, string?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    writer.Write(value[i]);
                }
            }
        }
        internal static string?[]? DeserializeArray_0000(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new string?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = reader.ReadString();
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0001(ref TinyhandWriter writer, decimal?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    options.Resolver.GetFormatter<decimal?>().Serialize(ref writer, value[i], options);
                }
            }
        }
        internal static decimal?[]? DeserializeArray_0001(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new decimal?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = options.Resolver.GetFormatter<decimal?>().Deserialize(ref reader, options);
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0002(ref TinyhandWriter writer, double?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static double?[]? DeserializeArray_0002(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new double?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadDouble();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        [ModuleInitializer]
        internal static void __gen__load()
        {
            GeneratedResolver.Instance.SetFormatter<ConsoleApp1.TestClass>(new __gen__tf__0000());
        }

        class __gen__tf__0000: ITinyhandFormatter<ConsoleApp1.TestClass>
        {
            public void Serialize(ref TinyhandWriter w, ConsoleApp1.TestClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public ConsoleApp1.TestClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new ConsoleApp1.TestClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public ConsoleApp1.TestClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new ConsoleApp1.TestClass();
                v.Reconstruct(o);
                return v;
            }
        }
    }
}
