using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591

namespace XUnitTest
{
    public partial class PrimitiveIntKeyClass
    {
    }

    public partial class PrimitiveStringKeyClass
    {

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 66, 111, 111, 108, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 66, 121, 116, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 83, 66, 121, 116, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 83, 104, 111, 114, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 85, 83, 104, 111, 114, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0005 => new byte[] { 73, 110, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0006 => new byte[] { 85, 73, 110, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0007 => new byte[] { 76, 111, 110, 103, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0008 => new byte[] { 85, 76, 111, 110, 103, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0009 => new byte[] { 70, 108, 111, 97, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0010 => new byte[] { 68, 111, 117, 98, 108, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0011 => new byte[] { 68, 101, 99, 105, 109, 97, 108, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0012 => new byte[] { 83, 116, 114, 105, 110, 103, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0013 => new byte[] { 67, 104, 97, 114, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0014 => new byte[] { 68, 97, 116, 101, 84, 105, 109, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0015 => new byte[] { 66, 111, 111, 108, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0016 => new byte[] { 66, 121, 116, 101, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0017 => new byte[] { 83, 66, 121, 116, 101, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0018 => new byte[] { 83, 104, 111, 114, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0019 => new byte[] { 85, 83, 104, 111, 114, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0020 => new byte[] { 73, 110, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0021 => new byte[] { 85, 73, 110, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0022 => new byte[] { 76, 111, 110, 103, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0023 => new byte[] { 85, 76, 111, 110, 103, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0024 => new byte[] { 70, 108, 111, 97, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0025 => new byte[] { 68, 111, 117, 98, 108, 101, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0026 => new byte[] { 68, 101, 99, 105, 109, 97, 108, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0027 => new byte[] { 83, 116, 114, 105, 110, 103, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0028 => new byte[] { 67, 104, 97, 114, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0029 => new byte[] { 68, 97, 116, 101, 84, 105, 109, 101, 70, 105, 101, 108, 100, };
    }
}
