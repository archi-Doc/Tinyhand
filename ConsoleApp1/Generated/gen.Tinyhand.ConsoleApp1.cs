using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591

namespace ConsoleApp1
{
    public partial class TestClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteArrayHeader(11);
            writer.Write(this.x);
            writer.WriteNil();
            writer.Write(this.y);
            global::Tinyhand.Formatters.Builtin.SerializeNullableStringArray(ref writer, this.stringList);
            global::Tinyhand.Formatters.Generated.SerializeArray_0000(ref writer, this.stringList2, options);
            global::Tinyhand.Formatters.Generated.SerializeArray_0001(ref writer, this.DecimalArray, options);
            global::Tinyhand.Formatters.Generated.SerializeArray_0002(ref writer, this.DoubleArray, options);
            options.Resolver.GetFormatter<int[,,]>().Serialize(ref writer, this.z,options);
            options.Resolver.GetFormatter<System.Collections.Generic.KeyValuePair<int, string>>().Serialize(ref writer, this.kvp, options);
            options.Resolver.GetFormatter<System.Version>().Serialize(ref writer, this.version, options);
            options.Resolver.GetFormatter<System.Lazy<string>>().Serialize(ref writer, this.ls, options);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.x = reader.ReadInt32();
                }
                else
                {
                    this.x = 0;
                }
                if (numberOfData-- > 0) reader.Skip();
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.y = reader.ReadInt32();
                }
                else
                {
                    this.y = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.stringList = global::Tinyhand.Formatters.Builtin.DeserializeNullableStringArray(ref reader) ?? new string[0];
                }
                else
                {
                    this.stringList = new string[0];
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.stringList2 = global::Tinyhand.Formatters.Generated.DeserializeArray_0000(ref reader, options);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DecimalArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0001(ref reader, options) ?? System.Array.Empty<decimal?>();
                }
                else
                {
                    this.DecimalArray = System.Array.Empty<decimal?>();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DoubleArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0002(ref reader, options) ?? System.Array.Empty<double?>();
                }
                else
                {
                    this.DoubleArray = System.Array.Empty<double?>();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    var f = options.Resolver.GetFormatter<int[,,]>();
                    this.z = f.Deserialize(ref reader, options) ?? f.Reconstruct(options);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.kvp = options.Resolver.GetFormatter<System.Collections.Generic.KeyValuePair<int, string>>().Deserialize(ref reader, options);
                }
                else
                {
                    this.kvp = options.Resolver.GetFormatter<System.Collections.Generic.KeyValuePair<int, string>>().Reconstruct(options);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.version = options.Resolver.GetFormatter<System.Version>().Deserialize(ref reader, options);
                }
                else
                {
                    this.version = options.Resolver.GetFormatter<System.Version>().Reconstruct(options);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.ls = options.ResolveAndDeserializeReconstruct<System.Lazy<string>>(ref reader);
                }
                else
                {
                    this.ls = options.Resolver.GetFormatter<System.Lazy<string>>().Reconstruct(options);
                }
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            if (this.DecimalArray == null) 
            {
                this.DecimalArray = System.Array.Empty<decimal?>();
            }
            if (this.DoubleArray == null) 
            {
                this.DoubleArray = System.Array.Empty<double?>();
            }
            if (this.stringList == null) 
            {
                this.stringList = new string[0];
            }
            if (this.version == null) 
            {
                this.version = options.Resolver.GetFormatter<System.Version>().Reconstruct(options);
            }
            if (this.ls == null) 
            {
                this.ls = options.Resolver.GetFormatter<System.Lazy<string>>().Reconstruct(options);
            }
        }
    }
}
