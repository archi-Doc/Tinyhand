// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

#nullable enable
#pragma warning disable CS0162
#pragma warning disable CS1591
#pragma warning disable CS8774

namespace Sandbox
{
    public partial class EmptyClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
        }
        public void MemberNotNull()
        {
        }
    }

    public partial class ReconstructTestClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteMapHeader(5);
            writer.WriteString(ReconstructTestClass.__gen_utf8_key_0000);
            writer.Write(this.Int);
            writer.WriteString(ReconstructTestClass.__gen_utf8_key_0001);
            options.Resolver.GetFormatter<Sandbox.EmptyClass>().Serialize(ref writer, this.EmptyClass, options);
            writer.WriteString(ReconstructTestClass.__gen_utf8_key_0002);
            options.Resolver.GetFormatter<Sandbox.EmptyClass>().Serialize(ref writer, this.EmptyClassOff, options);
            writer.WriteString(ReconstructTestClass.__gen_utf8_key_0003);
            options.Resolver.GetFormatter<Sandbox.EmptyClass?>().Serialize(ref writer, this.EmptyClass2, options);
            writer.WriteString(ReconstructTestClass.__gen_utf8_key_0004);
            options.Resolver.GetFormatter<Sandbox.EmptyClass?>().Serialize(ref writer, this.EmptyClassOn, options);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            ulong key;
            var deserializedFlag = new bool[4];
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (utf8.Length == 0)
                    {
                        if (key != 0x746E49) goto SkipLabel;
                        deserializedFlag[0] = true;
                        if (!reader.TryReadNil())
                        {
                            this.Int = reader.ReadInt32();
                        }
                        else
                        {
                            this.Int = 12;
                        }
                    }
                    else
                    {
                        if (key != 0x616C437974706D45) goto SkipLabel;
                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                        if (key < 0x6E4F7373)
                        {
                            if (utf8.Length != 0) goto SkipLabel;
                            if (key == 0x7373)
                            {
                                deserializedFlag[1] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.EmptyClass = options.DeserializeAndReconstruct<Sandbox.EmptyClass>(ref reader);
                                }
                                else
                                {
                                    this.EmptyClass = options.Resolver.GetFormatter<Sandbox.EmptyClass>().Reconstruct(options);
                                }
                            }
                            else if (key == 0x327373)
                            {
                                if (!reader.TryReadNil())
                                {
                                    this.EmptyClass2 = options.Resolver.GetFormatter<Sandbox.EmptyClass?>().Deserialize(ref reader, options);
                                }
                            }
                        }
                        else
                        {
                            if (utf8.Length != 0) goto SkipLabel;
                            if (key == 0x6E4F7373)
                            {
                                deserializedFlag[3] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.EmptyClassOn = options.Resolver.GetFormatter<Sandbox.EmptyClass?>().Deserialize(ref reader, options);
                                }
                                else
                                {
                                    this.EmptyClassOn = options.Resolver.GetFormatter<Sandbox.EmptyClass?>().Reconstruct(options);
                                }
                            }
                            else if (key == 0x66664F7373)
                            {
                                deserializedFlag[2] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.EmptyClassOff = options.DeserializeAndReconstruct<Sandbox.EmptyClass>(ref reader);
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }

                if (!deserializedFlag[0])
                {
                    this.Int = 12;
                }
                if (!deserializedFlag[1] && this.EmptyClass == null)
                {
                    this.EmptyClass = options.Resolver.GetFormatter<Sandbox.EmptyClass>().Reconstruct(options);
                }
                if (!deserializedFlag[2] && this.EmptyClassOff == null)
                {
                    this.EmptyClassOff = options.Resolver.GetFormatter<Sandbox.EmptyClass>().Reconstruct(options);
                }
                if (!deserializedFlag[3] && this.EmptyClassOn == null)
                {
                    this.EmptyClassOn = options.Resolver.GetFormatter<Sandbox.EmptyClass?>().Reconstruct(options);
                }
                if (this.WithClass == null) this.WithClass = new Sandbox.ClassWithDefaultConstructor();
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            this.Int = 12;
            if (this.EmptyClass == null) 
            {
                this.EmptyClass = options.Resolver.GetFormatter<Sandbox.EmptyClass>().Reconstruct(options);
            }
            if (this.EmptyClassOn == null) 
            {
                this.EmptyClassOn = options.Resolver.GetFormatter<Sandbox.EmptyClass?>().Reconstruct(options);
            }
            if (this.WithClass == null) this.WithClass = new Sandbox.ClassWithDefaultConstructor();
        }
        [MemberNotNull(nameof(EmptyClass), nameof(EmptyClassOn), nameof(WithClass))]
        public void MemberNotNull()
        {
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 73, 110, 116, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 69, 109, 112, 116, 121, 67, 108, 97, 115, 115, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 69, 109, 112, 116, 121, 67, 108, 97, 115, 115, 79, 102, 102, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 69, 109, 112, 116, 121, 67, 108, 97, 115, 115, 50, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 69, 109, 112, 116, 121, 67, 108, 97, 115, 115, 79, 110, };
    }

    public partial class DefaultTestClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteMapHeader(15);
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0000);
            if (this.Bool == true) { writer.WriteNil(); }
            else
            {
                writer.Write(this.Bool);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0001);
            if (this.SByte == 11) { writer.WriteNil(); }
            else
            {
                writer.Write(this.SByte);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0002);
            if (this.Byte == 22) { writer.WriteNil(); }
            else
            {
                writer.Write(this.Byte);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0003);
            if (this.Short == 33) { writer.WriteNil(); }
            else
            {
                writer.Write(this.Short);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0004);
            if (this.UShort == 44) { writer.WriteNil(); }
            else
            {
                writer.Write(this.UShort);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0005);
            if (this.Int == 55) { writer.WriteNil(); }
            else
            {
                writer.Write(this.Int);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0006);
            if (this.UInt == 66u) { writer.WriteNil(); }
            else
            {
                writer.Write(this.UInt);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0007);
            if (this.Long == 77L) { writer.WriteNil(); }
            else
            {
                writer.Write(this.Long);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0008);
            if (this.ULong == 88ul) { writer.WriteNil(); }
            else
            {
                writer.Write(this.ULong);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0009);
            if (this.Float == 1.23f) { writer.WriteNil(); }
            else
            {
                writer.Write(this.Float);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0010);
            if (this.Double == 456.789d) { writer.WriteNil(); }
            else
            {
                writer.Write(this.Double);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0011);
            if (this.Decimal == 2134.44m) { writer.WriteNil(); }
            else
            {
                options.Resolver.GetFormatter<decimal>().Serialize(ref writer, this.Decimal, options);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0012);
            if (this.Char == 'c') { writer.WriteNil(); }
            else
            {
                writer.Write(this.Char);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0013);
            if (this.String == "test") { writer.WriteNil(); }
            else
            {
                writer.Write(this.String);
            }
            writer.WriteString(DefaultTestClass.__gen_utf8_key_0014);
            if (this.Enum == Sandbox.DefaultTestEnum.B) { writer.WriteNil(); }
            else
            {
                var ev = this.Enum; writer.Write(Unsafe.As<Sandbox.DefaultTestEnum, int>(ref ev));
            }
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            ulong key;
            var deserializedFlag = new bool[15];
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (key < 0x6574794253)
                    {
                        if (key < 0x6C6F6F42)
                        {
                            if (utf8.Length != 0) goto SkipLabel;
                            if (key == 0x746E49)
                            {
                                deserializedFlag[5] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.Int = reader.ReadInt32();
                                }
                                else
                                {
                                    this.Int = 55;
                                }
                            }
                            else if (key == 0x65747942)
                            {
                                deserializedFlag[2] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.Byte = reader.ReadUInt8();
                                }
                                else
                                {
                                    this.Byte = 22;
                                }
                            }
                            else if (key == 0x676E6F4C)
                            {
                                deserializedFlag[7] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.Long = reader.ReadInt64();
                                }
                                else
                                {
                                    this.Long = 77L;
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x72616843)
                            {
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key == 0x6C6F6F42)
                                {
                                    deserializedFlag[0] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.Bool = reader.ReadBoolean();
                                    }
                                    else
                                    {
                                        this.Bool = true;
                                    }
                                }
                                else if (key == 0x6D756E45)
                                {
                                    deserializedFlag[14] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        var ev = reader.ReadInt32(); this.Enum = Unsafe.As<int, Sandbox.DefaultTestEnum>(ref ev);
                                    }
                                    else
                                    {
                                        this.Enum = Sandbox.DefaultTestEnum.B;
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key == 0x72616843)
                                {
                                    deserializedFlag[12] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.Char = reader.ReadChar();
                                    }
                                    else
                                    {
                                        this.Char = 'c';
                                    }
                                }
                                else if (key == 0x746E4955)
                                {
                                    deserializedFlag[6] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UInt = reader.ReadUInt32();
                                    }
                                    else
                                    {
                                        this.UInt = 66u;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (key < 0x656C62756F44)
                        {
                            if (key < 0x74616F6C46)
                            {
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key == 0x6574794253)
                                {
                                    deserializedFlag[1] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.SByte = reader.ReadInt8();
                                    }
                                    else
                                    {
                                        this.SByte = 11;
                                    }
                                }
                                else if (key == 0x676E6F4C55)
                                {
                                    deserializedFlag[8] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.ULong = reader.ReadUInt64();
                                    }
                                    else
                                    {
                                        this.ULong = 88ul;
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key == 0x74616F6C46)
                                {
                                    deserializedFlag[9] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.Float = reader.ReadSingle();
                                    }
                                    else
                                    {
                                        this.Float = 1.23f;
                                    }
                                }
                                else if (key == 0x74726F6853)
                                {
                                    deserializedFlag[3] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.Short = reader.ReadInt16();
                                    }
                                    else
                                    {
                                        this.Short = 33;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x74726F685355)
                            {
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key == 0x656C62756F44)
                                {
                                    deserializedFlag[10] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.Double = reader.ReadDouble();
                                    }
                                    else
                                    {
                                        this.Double = 456.789d;
                                    }
                                }
                                else if (key == 0x676E69727453)
                                {
                                    deserializedFlag[13] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.String = reader.ReadString() ?? string.Empty;
                                    }
                                    else
                                    {
                                        this.String = "test";
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key == 0x74726F685355)
                                {
                                    deserializedFlag[4] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UShort = reader.ReadUInt16();
                                    }
                                    else
                                    {
                                        this.UShort = 44;
                                    }
                                }
                                else if (key == 0x6C616D69636544)
                                {
                                    deserializedFlag[11] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.Decimal = options.Resolver.GetFormatter<decimal>().Deserialize(ref reader, options);
                                    }
                                    else
                                    {
                                        this.Decimal = 2134.44m;
                                    }
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }

                if (!deserializedFlag[0])
                {
                    this.Bool = true;
                }
                if (!deserializedFlag[1])
                {
                    this.SByte = 11;
                }
                if (!deserializedFlag[2])
                {
                    this.Byte = 22;
                }
                if (!deserializedFlag[3])
                {
                    this.Short = 33;
                }
                if (!deserializedFlag[4])
                {
                    this.UShort = 44;
                }
                if (!deserializedFlag[5])
                {
                    this.Int = 55;
                }
                if (!deserializedFlag[6])
                {
                    this.UInt = 66u;
                }
                if (!deserializedFlag[7])
                {
                    this.Long = 77L;
                }
                if (!deserializedFlag[8])
                {
                    this.ULong = 88ul;
                }
                if (!deserializedFlag[9])
                {
                    this.Float = 1.23f;
                }
                if (!deserializedFlag[10])
                {
                    this.Double = 456.789d;
                }
                if (!deserializedFlag[11])
                {
                    this.Decimal = 2134.44m;
                }
                if (!deserializedFlag[12])
                {
                    this.Char = 'c';
                }
                if (!deserializedFlag[13])
                {
                    this.String = "test";
                }
                if (!deserializedFlag[14])
                {
                    this.Enum = Sandbox.DefaultTestEnum.B;
                }
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            this.Bool = true;
            this.SByte = 11;
            this.Byte = 22;
            this.Short = 33;
            this.UShort = 44;
            this.Int = 55;
            this.UInt = 66u;
            this.Long = 77L;
            this.ULong = 88ul;
            this.Float = 1.23f;
            this.Double = 456.789d;
            this.Decimal = 2134.44m;
            this.Char = 'c';
            this.String = "test";
            this.Enum = Sandbox.DefaultTestEnum.B;
        }
        [MemberNotNull(nameof(String))]
        public void MemberNotNull()
        {
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 66, 111, 111, 108, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 83, 66, 121, 116, 101, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 66, 121, 116, 101, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 83, 104, 111, 114, 116, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 85, 83, 104, 111, 114, 116, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0005 => new byte[] { 73, 110, 116, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0006 => new byte[] { 85, 73, 110, 116, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0007 => new byte[] { 76, 111, 110, 103, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0008 => new byte[] { 85, 76, 111, 110, 103, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0009 => new byte[] { 70, 108, 111, 97, 116, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0010 => new byte[] { 68, 111, 117, 98, 108, 101, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0011 => new byte[] { 68, 101, 99, 105, 109, 97, 108, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0012 => new byte[] { 67, 104, 97, 114, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0013 => new byte[] { 83, 116, 114, 105, 110, 103, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0014 => new byte[] { 69, 110, 117, 109, };
    }

    public partial class StringEmptyClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteMapHeader(0);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            ulong key;
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    goto SkipLabel;
                    continue;
SkipLabel:
                    reader.Skip();
                }
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
        }
        public void MemberNotNull()
        {
        }
    }

    public partial class SampleCallback : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            this.OnBeforeSerialize();
            writer.WriteArrayHeader(1);
            writer.Write(this.Key);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.Key = reader.ReadInt32();
                }
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
            this.OnAfterDeserialize();
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
        }
        public void MemberNotNull()
        {
        }
    }

    public partial class GenericsTestClass2<V>
    {
        public static void Serialize(ref TinyhandWriter writer, GenericsTestClass2<int>? value, TinyhandSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }
            writer.WriteMapHeader(1);
            writer.WriteString(GenericsTestClass2<V>.__gen_utf8_key_0000);
            writer.Write(value.VValue);
        }
        public static GenericsTestClass2<int>? Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            if (reader.TryReadNil()) return default;
            var v = new Sandbox.GenericsTestClass2<int>();
            ulong key;
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (utf8.Length != 0) goto SkipLabel;
                    if (key != 0x65756C615656) goto SkipLabel;
                    if (!reader.TryReadNil())
                    {
                        v.VValue = reader.ReadInt32();
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }
            }
            finally { reader.Depth--; }
            return v;
        }
        public static GenericsTestClass2<int> Reconstruct(TinyhandSerializerOptions options)
        {
            var v = new Sandbox.GenericsTestClass2<int>();
            return v;
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 86, 86, 97, 108, 117, 101, };
    }

    public partial class GenericsTestClass<T>
    {
        public static void Serialize(ref TinyhandWriter writer, GenericsTestClass<string>? value, TinyhandSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }
            writer.WriteMapHeader(5);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0000);
            writer.Write(value.Int);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0001);
            writer.Write(value.TValue);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0002);
            options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass<double>>().Serialize(ref writer, value.NestedClass, options);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0003);
            options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass2>().Serialize(ref writer, value.NestedClass2, options);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0004);
            options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Serialize(ref writer, value.ClassInt, options);
        }
        public static GenericsTestClass<string>? Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            if (reader.TryReadNil()) return default;
            var v = new Sandbox.GenericsTestClass<string>();
            ulong key;
            var deserializedFlag = new bool[5];
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (key < 0x6C4364657473654E)
                    {
                        if (utf8.Length != 0) goto SkipLabel;
                        if (key == 0x746E49)
                        {
                            deserializedFlag[0] = true;
                            if (!reader.TryReadNil())
                            {
                                v.Int = reader.ReadInt32();
                            }
                            else
                            {
                                v.Int = 12;
                            }
                        }
                        else if (key == 0x65756C615654)
                        {
                            deserializedFlag[1] = true;
                            if (!reader.TryReadNil())
                            {
                                v.TValue = reader.ReadString() ?? string.Empty;
                            }
                            else
                            {
                                v.TValue = string.Empty;
                            }
                        }
                    }
                    else
                    {
                        if (utf8.Length == 0)
                        {
                            if (key != 0x746E497373616C43) goto SkipLabel;
                            deserializedFlag[4] = true;
                            if (!reader.TryReadNil())
                            {
                                v.ClassInt = options.DeserializeAndReconstruct<Sandbox.GenericsTestClass2<int>>(ref reader);
                            }
                            else
                            {
                                v.ClassInt = options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Reconstruct(options);
                            }
                        }
                        else
                        {
                            if (key != 0x6C4364657473654E) goto SkipLabel;
                            key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                            if (utf8.Length != 0) goto SkipLabel;
                            if (key == 0x737361)
                            {
                                deserializedFlag[2] = true;
                                if (!reader.TryReadNil())
                                {
                                    v.NestedClass = options.DeserializeAndReconstruct<Sandbox.GenericsTestClass<string>.GenericsNestedClass<double>>(ref reader);
                                }
                                else
                                {
                                    v.NestedClass = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass<double>>().Reconstruct(options);
                                }
                            }
                            else if (key == 0x32737361)
                            {
                                deserializedFlag[3] = true;
                                if (!reader.TryReadNil())
                                {
                                    v.NestedClass2 = options.DeserializeAndReconstruct<Sandbox.GenericsTestClass<string>.GenericsNestedClass2>(ref reader);
                                }
                                else
                                {
                                    v.NestedClass2 = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass2>().Reconstruct(options);
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }

                if (!deserializedFlag[0])
                {
                    v.Int = 12;
                }
                if (!deserializedFlag[1] && v.TValue == null)
                {
                    v.TValue = string.Empty;
                }
                if (!deserializedFlag[2] && v.NestedClass == null)
                {
                    v.NestedClass = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass<double>>().Reconstruct(options);
                }
                if (!deserializedFlag[3] && v.NestedClass2 == null)
                {
                    v.NestedClass2 = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass2>().Reconstruct(options);
                }
                if (!deserializedFlag[4] && v.ClassInt == null)
                {
                    v.ClassInt = options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Reconstruct(options);
                }
            }
            finally { reader.Depth--; }
            return v;
        }
        public static GenericsTestClass<string> Reconstruct(TinyhandSerializerOptions options)
        {
            var v = new Sandbox.GenericsTestClass<string>();
            v.Int = 12;
            if (v.TValue == null) 
            {
                v.TValue = string.Empty;
            }
            if (v.NestedClass == null) 
            {
                v.NestedClass = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass<double>>().Reconstruct(options);
            }
            if (v.NestedClass2 == null) 
            {
                v.NestedClass2 = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<string>.GenericsNestedClass2>().Reconstruct(options);
            }
            if (v.ClassInt == null) 
            {
                v.ClassInt = options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Reconstruct(options);
            }
            return v;
        }

        public static void Serialize(ref TinyhandWriter writer, GenericsTestClass<long>? value, TinyhandSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }
            writer.WriteMapHeader(5);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0000);
            writer.Write(value.Int);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0001);
            writer.Write(value.TValue);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0002);
            options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass<double>>().Serialize(ref writer, value.NestedClass, options);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0003);
            options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass2>().Serialize(ref writer, value.NestedClass2, options);
            writer.WriteString(GenericsTestClass<T>.__gen_utf8_key_0004);
            options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Serialize(ref writer, value.ClassInt, options);
        }
        public static GenericsTestClass<long>? Deserialize2(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            if (reader.TryReadNil()) return default;
            var v = new Sandbox.GenericsTestClass<long>();
            ulong key;
            var deserializedFlag = new bool[4];
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (key < 0x6C4364657473654E)
                    {
                        if (utf8.Length != 0) goto SkipLabel;
                        if (key == 0x746E49)
                        {
                            deserializedFlag[0] = true;
                            if (!reader.TryReadNil())
                            {
                                v.Int = reader.ReadInt32();
                            }
                            else
                            {
                                v.Int = 12;
                            }
                        }
                        else if (key == 0x65756C615654)
                        {
                            if (!reader.TryReadNil())
                            {
                                v.TValue = reader.ReadInt64();
                            }
                        }
                    }
                    else
                    {
                        if (utf8.Length == 0)
                        {
                            if (key != 0x746E497373616C43) goto SkipLabel;
                            deserializedFlag[3] = true;
                            if (!reader.TryReadNil())
                            {
                                v.ClassInt = options.DeserializeAndReconstruct<Sandbox.GenericsTestClass2<int>>(ref reader);
                            }
                            else
                            {
                                v.ClassInt = options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Reconstruct(options);
                            }
                        }
                        else
                        {
                            if (key != 0x6C4364657473654E) goto SkipLabel;
                            key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                            if (utf8.Length != 0) goto SkipLabel;
                            if (key == 0x737361)
                            {
                                deserializedFlag[1] = true;
                                if (!reader.TryReadNil())
                                {
                                    v.NestedClass = options.DeserializeAndReconstruct<Sandbox.GenericsTestClass<long>.GenericsNestedClass<double>>(ref reader);
                                }
                                else
                                {
                                    v.NestedClass = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass<double>>().Reconstruct(options);
                                }
                            }
                            else if (key == 0x32737361)
                            {
                                deserializedFlag[2] = true;
                                if (!reader.TryReadNil())
                                {
                                    v.NestedClass2 = options.DeserializeAndReconstruct<Sandbox.GenericsTestClass<long>.GenericsNestedClass2>(ref reader);
                                }
                                else
                                {
                                    v.NestedClass2 = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass2>().Reconstruct(options);
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }

                if (!deserializedFlag[0])
                {
                    v.Int = 12;
                }
                if (!deserializedFlag[1] && v.NestedClass == null)
                {
                    v.NestedClass = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass<double>>().Reconstruct(options);
                }
                if (!deserializedFlag[2] && v.NestedClass2 == null)
                {
                    v.NestedClass2 = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass2>().Reconstruct(options);
                }
                if (!deserializedFlag[3] && v.ClassInt == null)
                {
                    v.ClassInt = options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Reconstruct(options);
                }
            }
            finally { reader.Depth--; }
            return v;
        }
        public static GenericsTestClass<long> Reconstruct2(TinyhandSerializerOptions options)
        {
            var v = new Sandbox.GenericsTestClass<long>();
            v.Int = 12;
            if (v.NestedClass == null) 
            {
                v.NestedClass = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass<double>>().Reconstruct(options);
            }
            if (v.NestedClass2 == null) 
            {
                v.NestedClass2 = options.Resolver.GetFormatter<Sandbox.GenericsTestClass<long>.GenericsNestedClass2>().Reconstruct(options);
            }
            if (v.ClassInt == null) 
            {
                v.ClassInt = options.Resolver.GetFormatter<Sandbox.GenericsTestClass2<int>>().Reconstruct(options);
            }
            return v;
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 73, 110, 116, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 84, 86, 97, 108, 117, 101, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 78, 101, 115, 116, 101, 100, 67, 108, 97, 115, 115, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 78, 101, 115, 116, 101, 100, 67, 108, 97, 115, 115, 50, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 67, 108, 97, 115, 115, 73, 110, 116, };
    }
}
