// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using FastExpressionCompiler;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

#nullable enable
#pragma warning disable CS0219
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS0168
#pragma warning disable CS1591
#pragma warning disable CS8618
#pragma warning disable CS8714
#pragma warning disable CS8774

namespace Tinyhand.Formatters
{
    static class Generated
    {
        internal static void __gen__load()
        {
            GeneratedResolver.Instance.SetFormatterGenerator(typeof(Sandbox.InternalTestBase<>), x =>
            {
                var formatter = Activator.CreateInstance(typeof(__gen__tf__0000<>).MakeGenericType(x));
                var formatterExtra = Activator.CreateInstance(typeof(__gen__tf__0001<>).MakeGenericType(x));
                return ((ITinyhandFormatter)formatter!, (ITinyhandFormatterExtra)formatterExtra!);
            });
            GeneratedResolver.Instance.SetFormatterGenerator(typeof(Sandbox.InternalTestClass2<>), x =>
            {
                var formatter = Activator.CreateInstance(typeof(__gen__tf__0002<>).MakeGenericType(x));
                var formatterExtra = Activator.CreateInstance(typeof(__gen__tf__0003<>).MakeGenericType(x));
                return ((ITinyhandFormatter)formatter!, (ITinyhandFormatterExtra)formatterExtra!);
            });
            GeneratedResolver.Instance.SetFormatter<Sandbox.InternalTestClass2<double>>(new __gen__tf__0004());
            GeneratedResolver.Instance.SetFormatterExtra<Sandbox.InternalTestClass2<double>>(new __gen__tf__0005());
        }

        class __gen__tf__0000<T>: ITinyhandFormatter<Sandbox.InternalTestBase<T>>
        {
            public void Serialize(ref TinyhandWriter writer, Sandbox.InternalTestBase<T>? v, TinyhandSerializerOptions options)
            {
                if (v == null) { writer.WriteNil(); return; }
                v.Serialize(ref writer, options);
            }
            public Sandbox.InternalTestBase<T>? Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                if (reader.TryReadNil()) return default;
                var v = new Sandbox.InternalTestBase<T>();
                v.Deserialize(ref reader, options);
                return v;
            }
            public Sandbox.InternalTestBase<T> Reconstruct(TinyhandSerializerOptions options)
            {
                var v = new Sandbox.InternalTestBase<T>();
                v.Reconstruct(options);
                return v;
            }
            public Sandbox.InternalTestBase<T>? Clone(Sandbox.InternalTestBase<T>? value, TinyhandSerializerOptions options)
            {
                return value?.DeepClone(options);
            }
        }
        class __gen__tf__0001<T>: ITinyhandFormatterExtra<Sandbox.InternalTestBase<T>>
        {
            public Sandbox.InternalTestBase<T>? Deserialize(Sandbox.InternalTestBase<T> reuse, ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                reuse = reuse ?? new Sandbox.InternalTestBase<T>();
                reuse.Deserialize(ref reader, options);
                return reuse;
            }
        }
        class __gen__tf__0002<T>: ITinyhandFormatter<Sandbox.InternalTestClass2<T>>
        {
            public void Serialize(ref TinyhandWriter writer, Sandbox.InternalTestClass2<T>? v, TinyhandSerializerOptions options)
            {
                if (v == null) { writer.WriteNil(); return; }
                v.Serialize(ref writer, options);
            }
            public Sandbox.InternalTestClass2<T>? Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                if (reader.TryReadNil()) return default;
                var v = new Sandbox.InternalTestClass2<T>();
                v.Deserialize(ref reader, options);
                return v;
            }
            public Sandbox.InternalTestClass2<T> Reconstruct(TinyhandSerializerOptions options)
            {
                var v = new Sandbox.InternalTestClass2<T>();
                v.Reconstruct(options);
                return v;
            }
            public Sandbox.InternalTestClass2<T>? Clone(Sandbox.InternalTestClass2<T>? value, TinyhandSerializerOptions options)
            {
                return value?.DeepClone(options);
            }
        }
        class __gen__tf__0003<T>: ITinyhandFormatterExtra<Sandbox.InternalTestClass2<T>>
        {
            public Sandbox.InternalTestClass2<T>? Deserialize(Sandbox.InternalTestClass2<T> reuse, ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                reuse = reuse ?? new Sandbox.InternalTestClass2<T>();
                reuse.Deserialize(ref reader, options);
                return reuse;
            }
        }
        class __gen__tf__0004: ITinyhandFormatter<Sandbox.InternalTestClass2<double>>
        {
            public void Serialize(ref TinyhandWriter writer, Sandbox.InternalTestClass2<double>? v, TinyhandSerializerOptions options)
            {
                if (v == null) { writer.WriteNil(); return; }
                Sandbox.InternalTestClass2<double>.Serialize(ref writer, v, options);
            }
            public Sandbox.InternalTestClass2<double>? Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                if (reader.TryReadNil()) return default;
                var v = new Sandbox.InternalTestClass2<double>();
                Sandbox.InternalTestClass2<double>.Deserialize2(ref v, ref reader, options);
                return v;
            }
            public Sandbox.InternalTestClass2<double> Reconstruct(TinyhandSerializerOptions options)
            {
                var v = new Sandbox.InternalTestClass2<double>();
                Sandbox.InternalTestClass2<double>.Reconstruct2(ref v, options);
                return v;
            }
            public Sandbox.InternalTestClass2<double>? Clone(Sandbox.InternalTestClass2<double>? value, TinyhandSerializerOptions options)
            {
                return Sandbox.InternalTestClass2<double>.DeepClone2(ref value, options);
            }
        }
        class __gen__tf__0005: ITinyhandFormatterExtra<Sandbox.InternalTestClass2<double>>
        {
            public Sandbox.InternalTestClass2<double>? Deserialize(Sandbox.InternalTestClass2<double> reuse, ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                reuse = reuse ?? new Sandbox.InternalTestClass2<double>();
                Sandbox.InternalTestClass2<double>.Deserialize2(ref reuse, ref reader, options);
                return reuse;
            }
        }
    }
}

namespace Tinyhand
{
    public static class TinyhandModule_6f59c4ad
    {
        private static bool Initialized;

        [ModuleInitializer]
        public static void Initialize()
        {
            if (Initialized) return;
            Initialized = true;

            Tinyhand.Formatters.Generated.__gen__load();
        }
    }
}
