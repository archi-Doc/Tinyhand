// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using FastExpressionCompiler;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

#nullable enable
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS1591
#pragma warning disable CS8618
#pragma warning disable CS8774

namespace Tinyhand.Formatters
{
    static class Generated
    {
        internal static void __gen__load()
        {
            GeneratedResolver.Instance.SetFormatterGenerator(typeof(Sandbox.AbstractTestBase<>), x =>
            {
                var formatter = Activator.CreateInstance(typeof(__gen__tf__0000<>).MakeGenericType(x));
                var formatterExtra = Activator.CreateInstance(typeof(__gen__tf__0001<>).MakeGenericType(x));
                return ((ITinyhandFormatter)formatter!, (ITinyhandFormatterExtra)formatterExtra!);
            });
            GeneratedResolver.Instance.SetFormatter<Sandbox.AbstractTestClass>(new __gen__tf__0002());
            GeneratedResolver.Instance.SetFormatterExtra<Sandbox.AbstractTestClass>(new __gen__tf__0003());
        }

        class __gen__tf__0000<TIdentifier>: ITinyhandFormatter<Sandbox.AbstractTestBase<TIdentifier>>
            where TIdentifier : notnull
        {
            public void Serialize(ref TinyhandWriter writer, Sandbox.AbstractTestBase<TIdentifier>? v, TinyhandSerializerOptions options)
            {
                if (v == null) { writer.WriteNil(); return; }
                writer.WriteArrayHeader(2);
                var type = v.GetType();
                if (type == typeof(Sandbox.AbstractTestClass))
                {
                    writer.Write(0);
                    options.Resolver.GetFormatter<Sandbox.AbstractTestClass>().Serialize(ref writer, Unsafe.As<Sandbox.AbstractTestClass>(v), options);
                }
                else
                {
                    writer.WriteNil();
                    writer.WriteNil();
                }
            }
            public Sandbox.AbstractTestBase<TIdentifier>? Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                if (reader.TryReadNil()) { return default; }
                if (reader.ReadArrayHeader() != 2) { throw new TinyhandException("Invalid Union data was detected."); }
                if (reader.TryReadNil()) { reader.ReadNil(); return default; }
                var key = reader.ReadInt32();
                switch (key)
                {
                    case 0:
                        return Unsafe.As<Sandbox.AbstractTestBase<TIdentifier>?>(options.Resolver.GetFormatter<Sandbox.AbstractTestClass>().Deserialize(ref reader, options));
                    default:
                        reader.Skip();
                        return default;
                }
            }
            public Sandbox.AbstractTestBase<TIdentifier> Reconstruct(TinyhandSerializerOptions options)
            {
                throw new TinyhandException("Reconstruct() is not supported in abstract class or interface.");
            }
            public Sandbox.AbstractTestBase<TIdentifier>? Clone(Sandbox.AbstractTestBase<TIdentifier>? value, TinyhandSerializerOptions options)
            {
                throw new TinyhandException("Clone() is not supported in abstract class or interface.");
            }
        }
        class __gen__tf__0001<TIdentifier>: ITinyhandFormatterExtra<Sandbox.AbstractTestBase<TIdentifier>>
        {
            public Sandbox.AbstractTestBase<TIdentifier>? Deserialize(Sandbox.AbstractTestBase<TIdentifier> reuse, ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                if (reader.TryReadNil()) { return default; }
                if (reader.ReadArrayHeader() != 2) { throw new TinyhandException("Invalid Union data was detected."); }
                if (reader.TryReadNil()) { reader.ReadNil(); return default; }
                var key = reader.ReadInt32();
                switch (key)
                {
                    case 0:
                        if (reuse is Sandbox.AbstractTestClass x0)
                        {
                            return Unsafe.As<Sandbox.AbstractTestBase<TIdentifier>?>(options.Resolver.GetFormatterExtra<Sandbox.AbstractTestClass>().Deserialize(x0, ref reader, options));
                        }
                        else
                        {
                            return Unsafe.As<Sandbox.AbstractTestBase<TIdentifier>?>(options.Resolver.GetFormatter<Sandbox.AbstractTestClass>().Deserialize(ref reader, options));
                        }
                    default:
                        reader.Skip();
                        return default;
                }
            }
        }
        class __gen__tf__0002: ITinyhandFormatter<Sandbox.AbstractTestClass>
        {
            public void Serialize(ref TinyhandWriter writer, Sandbox.AbstractTestClass? v, TinyhandSerializerOptions options)
            {
                if (v == null) { writer.WriteNil(); return; }
                v.Serialize(ref writer, options);
            }
            public Sandbox.AbstractTestClass? Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                if (reader.TryReadNil()) return default;
                var v = new Sandbox.AbstractTestClass();
                v.Deserialize(ref reader, options);
                return v;
            }
            public Sandbox.AbstractTestClass Reconstruct(TinyhandSerializerOptions options)
            {
                var v = new Sandbox.AbstractTestClass();
                v.Reconstruct(options);
                return v;
            }
            public Sandbox.AbstractTestClass? Clone(Sandbox.AbstractTestClass? value, TinyhandSerializerOptions options)
            {
                return value?.DeepClone(options);
            }
        }
        class __gen__tf__0003: ITinyhandFormatterExtra<Sandbox.AbstractTestClass>
        {
            public Sandbox.AbstractTestClass? Deserialize(Sandbox.AbstractTestClass reuse, ref TinyhandReader reader, TinyhandSerializerOptions options)
            {
                reuse = reuse ?? new Sandbox.AbstractTestClass();
                reuse.Deserialize(ref reader, options);
                return reuse;
            }
        }
    }
}

namespace Tinyhand
{
    public static class TinyhandModule
    {
        private static bool Initialized;

        [ModuleInitializer]
        public static void Initialize()
        {
            if (TinyhandModule.Initialized) return;
            TinyhandModule.Initialized = true;

            Tinyhand.Formatters.Generated.__gen__load();
        }
    }
}
