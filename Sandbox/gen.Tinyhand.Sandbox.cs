// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using FastExpressionCompiler;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

#nullable enable
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS1591
#pragma warning disable CS8618
#pragma warning disable CS8774

namespace Sandbox
{


    public partial class AbstractTestClass : ITinyhandSerialize, ITinyhandReconstruct, ITinyhandClone<AbstractTestClass>
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteArrayHeader(3);
            writer.Write(this.Number);
            writer.Write(this.Identifier);
            writer.Write(this.Text);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.Number = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.Identifier = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.Text = reader.ReadString() ?? string.Empty;
                }
                else
                {
                    this.Text = string.Empty;
                }
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            
            {
                this.Text = string.Empty;
            }
        }
        public Sandbox.AbstractTestClass DeepClone(TinyhandSerializerOptions options)
        {
            var value = new Sandbox.AbstractTestClass();
            
            {
                value.Text = this.Text!;
            }
            
            {
                value.Number = this.Number;
            }
            
            {
                value.Identifier = this.Identifier;
            }
            return value;
        }
        public void MemberNotNull()
        {
        }
    }
}
