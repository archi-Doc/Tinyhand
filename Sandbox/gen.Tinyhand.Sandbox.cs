// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using FastExpressionCompiler;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

#nullable enable
#pragma warning disable CS0219
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS0168
#pragma warning disable CS1591
#pragma warning disable CS8618
#pragma warning disable CS8714
#pragma warning disable CS8774

namespace Sandbox
{
    public partial class InternalTestBase<T> : ITinyhandSerialize, ITinyhandReconstruct, ITinyhandClone<InternalTestBase<T>>
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteArrayHeader(7);
            writer.Write(this.InternalInt);
            writer.Write(this.PrivateInt);
            writer.Write(this.PublicPublic);
            writer.Write(this.PublicProtected);
            writer.Write(this.PrivateProtected);
            writer.Write(this.PublicPrivate);
            options.Resolver.GetFormatter<T>().Serialize(ref writer, this.PrivatePrivate, options);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.InternalInt = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PrivateInt = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PublicPublic = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PublicProtected = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PrivateProtected = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PublicPrivate = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    var f = options.Resolver.GetFormatter<T>();
                    this.PrivatePrivate = f.Deserialize(ref reader, options) ?? f.Reconstruct(options);
                }
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
        }
        public Sandbox.InternalTestBase<T> DeepClone(TinyhandSerializerOptions options)
        {
            var value = new Sandbox.InternalTestBase<T>();
            
            {
                value.PublicPublic = this.PublicPublic;
            }
            
            {
                value.PublicProtected = this.PublicProtected;
            }
            
            {
                value.PrivateProtected = this.PrivateProtected;
            }
            
            {
                value.PublicPrivate = this.PublicPrivate;
            }
            value.PrivatePrivate = options.Resolver.GetFormatter<T>().Clone(this.PrivatePrivate, options)!;
            
            {
                value.InternalInt = this.InternalInt;
            }
            
            {
                value.PrivateInt = this.PrivateInt;
            }
            return value;
        }
        public void MemberNotNull()
        {
        }
    }

    public partial class InternalTestClass2<T> : ITinyhandSerialize, ITinyhandReconstruct, ITinyhandClone<InternalTestClass2<T>>
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteArrayHeader(9);
            writer.Write(this.InternalInt);
            
            {
                var vd = __gen_th_identifier_006!(this);
                writer.Write(vd);
            }
            writer.Write(this.PublicPublic);
            writer.Write(this.PublicProtected);
            
            {
                var vd = __gen_th_identifier_004!(this);
                writer.Write(vd);
            }
            writer.Write(this.PublicPrivate);
            
            {
                var vd = __gen_th_identifier_005!(this);
                options.Resolver.GetFormatter<T>().Serialize(ref writer, vd, options);
            }
            writer.Write(this.InternalInt2);
            writer.Write(this.PrivateInt2);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.InternalInt = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    int vd;
                    vd = reader.ReadInt32();
                    __gen_th_identifier_003!(this, vd);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PublicPublic = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PublicProtected = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PrivateProtected = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    int vd;
                    vd = reader.ReadInt32();
                    __gen_th_identifier_001!(this, vd);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    T vd;
                    var f = options.Resolver.GetFormatter<T>();
                    this.PrivatePrivate = f.Deserialize(ref reader, options) ?? f.Reconstruct(options);
                    __gen_th_identifier_002!(this, vd);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.InternalInt2 = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.PrivateInt2 = reader.ReadInt32();
                }
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
        }
        public Sandbox.InternalTestClass2<T> DeepClone(TinyhandSerializerOptions options)
        {
            var value = new Sandbox.InternalTestClass2<T>();
            
            {
                value.PublicPublic = this.PublicPublic;
            }
            
            {
                value.PublicProtected = this.PublicProtected;
            }
            
            {
                value.PrivateProtected = __gen_th_identifier_004!(this);
            }
            
            {
                int vd;
                vd = this.PublicPrivate;
                __gen_th_identifier_001!(value, vd);
            }
            
            {
                T vd;
                vd = options.Resolver.GetFormatter<T>().Clone(__gen_th_identifier_005!(this), options)!;
                __gen_th_identifier_002!(value, vd);
            }
            
            {
                value.InternalInt2 = this.InternalInt2;
            }
            
            {
                value.PrivateInt2 = this.PrivateInt2;
            }
            
            {
                value.InternalInt = this.InternalInt;
            }
            
            {
                int vd;
                vd = __gen_th_identifier_006!(this);
                __gen_th_identifier_003!(value, vd);
            }
            return value;
        }

        public static void Serialize(ref TinyhandWriter writer, InternalTestClass2<double> v, TinyhandSerializerOptions options)
        {
            writer.WriteArrayHeader(9);
            writer.Write(v.InternalInt);
            
            {
                var vd = __gen_th_identifier_006!(v);
                writer.Write(vd);
            }
            writer.Write(v.PublicPublic);
            writer.Write(v.PublicProtected);
            
            {
                var vd = __gen_th_identifier_004!(v);
                writer.Write(vd);
            }
            writer.Write(v.PublicPrivate);
            
            {
                var vd = __gen_th_identifier_005!(v);
                writer.Write(vd);
            }
            writer.Write(v.InternalInt2);
            writer.Write(v.PrivateInt2);
        }
        public static void Deserialize2(ref InternalTestClass2<double> v, ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    v.InternalInt = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    int vd;
                    vd = reader.ReadInt32();
                    __gen_th_identifier_003!(this, vd);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    v.PublicPublic = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    v.PublicProtected = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    v.PrivateProtected = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    int vd;
                    vd = reader.ReadInt32();
                    __gen_th_identifier_001!(this, vd);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    double vd;
                    vd = reader.ReadDouble();
                    __gen_th_identifier_002!(this, vd);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    v.InternalInt2 = reader.ReadInt32();
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    v.PrivateInt2 = reader.ReadInt32();
                }
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
        }
        public static void Reconstruct2(ref InternalTestClass2<double> v, TinyhandSerializerOptions options)
        {
        }
        public static Sandbox.InternalTestClass2<double>? DeepClone2(ref InternalTestClass2<double>? v, TinyhandSerializerOptions options)
        {
            if (v == null) return null;
            var value = new Sandbox.InternalTestClass2<double>();
            
            {
                value.PublicPublic = v.PublicPublic;
            }
            
            {
                value.PublicProtected = v.PublicProtected;
            }
            
            {
                value.PrivateProtected = __gen_th_identifier_004!(v);
            }
            
            {
                int vd;
                vd = v.PublicPrivate;
                __gen_th_identifier_001!(value, vd);
            }
            
            {
                double vd;
                vd = __gen_th_identifier_005!(v);
                __gen_th_identifier_002!(value, vd);
            }
            
            {
                value.InternalInt2 = v.InternalInt2;
            }
            
            {
                value.PrivateInt2 = v.PrivateInt2;
            }
            
            {
                value.InternalInt = v.InternalInt;
            }
            
            {
                int vd;
                vd = __gen_th_identifier_006!(v);
                __gen_th_identifier_003!(value, vd);
            }
            return value;
        }
        public void MemberNotNull()
        {
        }

        private static bool __gen_th_identifier_007 = __gen_th_identifier_008();
        private static bool __gen_th_identifier_008()
        {
            var type = typeof(InternalTestClass2<T>);
            var expType = Expression.Parameter(type);
            System.Reflection.MethodInfo mi;
            ParameterExpression exp;
            ParameterExpression exp2;
            exp = Expression.Parameter(typeof(Sandbox.InternalTestBase<T>));
            __gen_th_identifier_004 = Expression.Lambda<Func<InternalTestClass2<T>, int>>(Expression.Field(exp, "PrivateProtected"), exp).CompileFast();
            mi = type.GetMethod("set_PublicPrivate")!;
            exp = Expression.Parameter(typeof(int));
            __gen_th_identifier_001 = Expression.Lambda<Action<InternalTestClass2<T>, int>>(Expression.Call(expType, mi!, exp), expType, exp).CompileFast();
            mi = type.GetMethod("set_PrivatePrivate")!;
            exp = Expression.Parameter(typeof(T));
            __gen_th_identifier_002 = Expression.Lambda<Action<InternalTestClass2<T>, T>>(Expression.Call(expType, mi!, exp), expType, exp).CompileFast();
            exp = Expression.Parameter(typeof(Sandbox.InternalTestBase<T>));
            __gen_th_identifier_005 = Expression.Lambda<Func<InternalTestClass2<T>, T>>(Expression.Field(exp, "PrivatePrivate"), exp).CompileFast();
            exp = Expression.Parameter(typeof(Sandbox.InternalTestBase<T>));
            exp2 = Expression.Parameter(typeof(int));
            __gen_th_identifier_003 = Expression.Lambda<Action<InternalTestClass2<T>, int>>(Expression.Assign(Expression.Field(exp, "PrivateInt"), exp2), exp, exp2).CompileFast();
            exp = Expression.Parameter(typeof(Sandbox.InternalTestBase<T>));
            __gen_th_identifier_006 = Expression.Lambda<Func<InternalTestClass2<T>, int>>(Expression.Field(exp, "PrivateInt"), exp).CompileFast();
            return true;
        }

        private static Func<InternalTestClass2<T>, int>? __gen_th_identifier_004;
        private static Action<InternalTestClass2<T>, int>? __gen_th_identifier_001;
        private static Action<InternalTestClass2<T>, T>? __gen_th_identifier_002;
        private static Func<InternalTestClass2<T>, T>? __gen_th_identifier_005;
        private static Action<InternalTestClass2<T>, int>? __gen_th_identifier_003;
        private static Func<InternalTestClass2<T>, int>? __gen_th_identifier_006;

    }
}
