<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var allTypes = new (string Simple, string Name)[]
{
    ("sbyte", "Int8"),
    ("ushort", "UInt16"),
    ("short", "Int16"),
    ("uint", "UInt32"),
    ("int", "Int32"),
    ("ulong", "UInt64"),
    ("long", "Int64"),
    ("float", "Single"),
    ("double", "Double"),
    ("bool", "Boolean"),
    ("char", "Char"),
    ("DateTime", "DateTime"),
};
#>
// Copyright (c) All contributors. All rights reserved. Licensed under the MIT license.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Tinyhand.IO;

#pragma warning disable SA1649 // File name should match first type name

namespace Tinyhand.Formatters
{
    public static partial class Builtin
    {<# foreach(var t in allTypes) {  #>

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static void Serialize<#= t.Name #>Array(ref TinyhandWriter writer, <#= t.Simple #>[]? value)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    writer.Write(value[i]);
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static <#= t.Simple #>[]? Deserialize<#= t.Name #>Array(ref TinyhandReader reader)
        {
            if (reader.TryReadNil())
            {
                return null; // new <#= t.Simple #>[0];
            }
            else
            {
                var len = reader.ReadArrayHeader();
                var array = new <#= t.Simple #>[len];
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = reader.Read<#= t.Name #>();
                }

                return array;
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static void Serialize<#= t.Name #>List(ref TinyhandWriter writer, List<<#= t.Simple #>>? value)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Count);
                for (int i = 0; i < value.Count; i++)
                {
                    writer.Write(value[i]);
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static List<<#= t.Simple #>>? Deserialize<#= t.Name #>List(ref TinyhandReader reader)
        {
            if (reader.TryReadNil())
            {
                return null; // new List<<#= t.Simple #>>();
            }
            else
            {
                var len = reader.ReadArrayHeader();
                var list = new List<<#= t.Simple #>>(len);
                for (int i = 0; i < len; i++)
                {
                    list.Add(reader.Read<#= t.Name #>());
                }

                return list;
            }
        }
<# } #>
    }
}
