<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var allTypes = new (string Simple, string Name)[]
{
    ("byte", "UInt8"),
    ("sbyte", "Int8"),
    ("ushort", "UInt16"),
    ("short", "Int16"),
    ("uint", "UInt32"),
    ("int", "Int32"),
    ("ulong", "UInt64"),
    ("long", "Int64"),
    ("float", "Single"),
    ("double", "Double"),
    ("bool", "Boolean"),
    ("char", "Char"),
    ("DateTime", "DateTime"),
    ("Int128", "Int128"),
    ("UInt128", "UInt128"),
};
#>
// Copyright (c) All contributors. All rights reserved. Licensed under the MIT license.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Tinyhand.IO;

#pragma warning disable SA1649 // File name should match first type name

namespace Tinyhand.Formatters;

public static partial class Builtin
{<# foreach(var t in allTypes) {  #>

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Serialize<#= t.Name #>Array(ref TinyhandWriter writer, <#= t.Simple #>[]? value)
    {
        if (value == null)
        {
            writer.WriteNil();
        }
        else
        {
            writer.WriteArrayHeader(value.Length);
            for (int i = 0; i < value.Length; i++)
            {
                writer.Write(value[i]);
            }
        }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Deserialize<#= t.Name #>Array(ref TinyhandReader reader, ref <#= t.Simple #>[]? value)
    {
        if (reader.TryReadNil())
        {
        }
        else
        {
            var len = reader.ReadArrayHeader();
            value = new <#= t.Simple #>[len];
            for (int i = 0; i < value.Length; i++)
            {
                value[i] = reader.Read<#= t.Name #>();
            }
        }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Serialize<#= t.Name #>List(ref TinyhandWriter writer, List<<#= t.Simple #>>? value)
    {
        if (value == null)
        {
            writer.WriteNil();
        }
        else
        {
            writer.WriteArrayHeader(value.Count);
            for (int i = 0; i < value.Count; i++)
            {
                writer.Write(value[i]);
            }
        }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Deserialize<#= t.Name #>List(ref TinyhandReader reader, ref List<<#= t.Simple #>>? value)
    {
        if (reader.TryReadNil())
        {
        }
        else
        {
            var len = reader.ReadArrayHeader();
            value ??= new List<<#= t.Simple #>>(len);
            for (int i = 0; i < len; i++)
            {
                value.Add(reader.Read<#= t.Name #>());
            }
        }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static <#= t.Simple #>[]? Clone<#= t.Name #>Array(<#= t.Simple #>[]? value)
    {
        if (value == null)
        {
            return null;
        }
        else
        {
            var array = new <#= t.Simple #>[value.Length];
            Array.Copy(value, array, value.Length);
            return array;
        }
    }
<# } #>
}
