using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591

namespace XUnitTest
{
    public partial class PrimitiveIntKeyClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteArrayHeader(30);
            writer.Write(this.BoolField);
            writer.Write(this.BoolProperty);
            writer.Write(this.ByteField);
            writer.Write(this.ByteProperty);
            writer.Write(this.SByteField);
            writer.Write(this.SByteProperty);
            writer.Write(this.ShortField);
            writer.Write(this.ShortProperty);
            writer.Write(this.UShortField);
            writer.Write(this.UShortProperty);
            writer.Write(this.IntField);
            writer.Write(this.IntProperty);
            writer.Write(this.UIntField);
            writer.Write(this.UIntProperty);
            writer.Write(this.LongField);
            writer.Write(this.LongProperty);
            writer.Write(this.ULongField);
            writer.Write(this.ULongProperty);
            writer.Write(this.FloatField);
            writer.Write(this.FloatProperty);
            writer.Write(this.DoubleField);
            writer.Write(this.DoubleProperty);
            options.Resolver.GetFormatter<decimal>().Serialize(ref writer, this.DecimalField, options);
            options.Resolver.GetFormatter<decimal>().Serialize(ref writer, this.DecimalProperty, options);
            writer.Write(this.StringField);
            writer.Write(this.StringProperty);
            writer.Write(this.CharField);
            writer.Write(this.CharProperty);
            writer.Write(this.DateTimeField);
            writer.Write(this.DateTimeProperty);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var numberOfData = reader.ReadArrayHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.BoolField = reader.ReadBoolean();
                }
                else
                {
                    this.BoolField = false;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.BoolProperty = reader.ReadBoolean();
                }
                else
                {
                    this.BoolProperty = false;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.ByteField = reader.ReadUInt8();
                }
                else
                {
                    this.ByteField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.ByteProperty = reader.ReadUInt8();
                }
                else
                {
                    this.ByteProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.SByteField = reader.ReadInt8();
                }
                else
                {
                    this.SByteField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.SByteProperty = reader.ReadInt8();
                }
                else
                {
                    this.SByteProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.ShortField = reader.ReadInt16();
                }
                else
                {
                    this.ShortField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.ShortProperty = reader.ReadInt16();
                }
                else
                {
                    this.ShortProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.UShortField = reader.ReadUInt16();
                }
                else
                {
                    this.UShortField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.UShortProperty = reader.ReadUInt16();
                }
                else
                {
                    this.UShortProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.IntField = reader.ReadInt32();
                }
                else
                {
                    this.IntField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.IntProperty = reader.ReadInt32();
                }
                else
                {
                    this.IntProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.UIntField = reader.ReadUInt32();
                }
                else
                {
                    this.UIntField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.UIntProperty = reader.ReadUInt32();
                }
                else
                {
                    this.UIntProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.LongField = reader.ReadInt64();
                }
                else
                {
                    this.LongField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.LongProperty = reader.ReadInt64();
                }
                else
                {
                    this.LongProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.ULongField = reader.ReadUInt64();
                }
                else
                {
                    this.ULongField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.ULongProperty = reader.ReadUInt64();
                }
                else
                {
                    this.ULongProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.FloatField = reader.ReadSingle();
                }
                else
                {
                    this.FloatField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.FloatProperty = reader.ReadSingle();
                }
                else
                {
                    this.FloatProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DoubleField = reader.ReadDouble();
                }
                else
                {
                    this.DoubleField = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DoubleProperty = reader.ReadDouble();
                }
                else
                {
                    this.DoubleProperty = 0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DecimalField = options.Resolver.GetFormatter<decimal>().Deserialize(ref reader, options);
                }
                else
                {
                    this.DecimalField = options.Resolver.GetFormatter<decimal>().Reconstruct(options);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DecimalProperty = options.Resolver.GetFormatter<decimal>().Deserialize(ref reader, options);
                }
                else
                {
                    this.DecimalProperty = options.Resolver.GetFormatter<decimal>().Reconstruct(options);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.StringField = reader.ReadString() ?? string.Empty;
                }
                else
                {
                    this.StringField = string.Empty;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.StringProperty = reader.ReadString() ?? string.Empty;
                }
                else
                {
                    this.StringProperty = string.Empty;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.CharField = reader.ReadChar();
                }
                else
                {
                    this.CharField = (char)0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.CharProperty = reader.ReadChar();
                }
                else
                {
                    this.CharProperty = (char)0;
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DateTimeField = reader.ReadDateTime();
                }
                else
                {
                    this.DateTimeField = default(DateTime);
                }
                if (numberOfData-- > 0 && !reader.TryReadNil())
                {
                    this.DateTimeProperty = reader.ReadDateTime();
                }
                else
                {
                    this.DateTimeProperty = default(DateTime);
                }
                while (numberOfData-- > 0) reader.Skip();
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            if (this.StringProperty == null) 
            {
                this.StringProperty = string.Empty;
            }
            if (this.StringField == null) 
            {
                this.StringField = string.Empty;
            }
        }
    }

    public partial class PrimitiveStringKeyClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteMapHeader(30);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0000);
            writer.Write(this.BoolProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0001);
            writer.Write(this.ByteProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0002);
            writer.Write(this.SByteProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0003);
            writer.Write(this.ShortProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0004);
            writer.Write(this.UShortProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0005);
            writer.Write(this.IntProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0006);
            writer.Write(this.UIntProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0007);
            writer.Write(this.LongProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0008);
            writer.Write(this.ULongProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0009);
            writer.Write(this.FloatProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0010);
            writer.Write(this.DoubleProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0011);
            options.Resolver.GetFormatter<decimal>().Serialize(ref writer, this.DecimalProperty, options);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0012);
            writer.Write(this.StringProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0013);
            writer.Write(this.CharProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0014);
            writer.Write(this.DateTimeProperty);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0015);
            writer.Write(this.BoolField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0016);
            writer.Write(this.ByteField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0017);
            writer.Write(this.SByteField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0018);
            writer.Write(this.ShortField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0019);
            writer.Write(this.UShortField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0020);
            writer.Write(this.IntField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0021);
            writer.Write(this.UIntField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0022);
            writer.Write(this.LongField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0023);
            writer.Write(this.ULongField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0024);
            writer.Write(this.FloatField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0025);
            writer.Write(this.DoubleField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0026);
            options.Resolver.GetFormatter<decimal>().Serialize(ref writer, this.DecimalField, options);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0027);
            writer.Write(this.StringField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0028);
            writer.Write(this.CharField);
            writer.WriteString(PrimitiveStringKeyClass.__gen_utf8_key_0029);
            writer.Write(this.DateTimeField);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            ulong key;
            var deserializedFlag = new bool[30];
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (key < 0x6C6569466C6F6F42)
                    {
                        if (key < 0x656D695465746144)
                        {
                            if (key < 0x6569466574794253)
                            {
                                if (utf8.Length == 0)
                                {
                                    if (key != 0x646C656946746E49) goto SkipLabel;
                                    deserializedFlag[20] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.IntField = reader.ReadInt32();
                                    }
                                    else
                                    {
                                        this.IntField = 0;
                                    }
                                }
                                else
                                {
                                    if (key == 0x466C616D69636544)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x646C6569) goto SkipLabel;
                                        deserializedFlag[26] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.DecimalField = options.Resolver.GetFormatter<decimal>().Deserialize(ref reader, options);
                                        }
                                        else
                                        {
                                            this.DecimalField = options.Resolver.GetFormatter<decimal>().Reconstruct(options);
                                        }
                                    }
                                    else if (key == 0x506C616D69636544)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265706F72) goto SkipLabel;
                                        deserializedFlag[11] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.DecimalProperty = options.Resolver.GetFormatter<decimal>().Deserialize(ref reader, options);
                                        }
                                        else
                                        {
                                            this.DecimalProperty = options.Resolver.GetFormatter<decimal>().Reconstruct(options);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (key < 0x65694674616F6C46)
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x6569466574794253)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x646C) goto SkipLabel;
                                        deserializedFlag[17] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.SByteField = reader.ReadInt8();
                                        }
                                        else
                                        {
                                            this.SByteField = 0;
                                        }
                                    }
                                    else if (key == 0x656946676E6F4C55)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x646C) goto SkipLabel;
                                        deserializedFlag[23] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.ULongField = reader.ReadUInt64();
                                        }
                                        else
                                        {
                                            this.ULongField = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x65694674616F6C46)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x646C) goto SkipLabel;
                                        deserializedFlag[24] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.FloatField = reader.ReadSingle();
                                        }
                                        else
                                        {
                                            this.FloatField = 0;
                                        }
                                    }
                                    else if (key == 0x65694674726F6853)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x646C) goto SkipLabel;
                                        deserializedFlag[18] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.ShortField = reader.ReadInt16();
                                        }
                                        else
                                        {
                                            this.ShortField = 0;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x6946676E69727453)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x656D695465746144)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key == 0x646C656946)
                                    {
                                        deserializedFlag[29] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.DateTimeField = reader.ReadDateTime();
                                        }
                                        else
                                        {
                                            this.DateTimeField = default(DateTime);
                                        }
                                    }
                                    else if (key == 0x79747265706F7250)
                                    {
                                        deserializedFlag[14] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.DateTimeProperty = reader.ReadDateTime();
                                        }
                                        else
                                        {
                                            this.DateTimeProperty = default(DateTime);
                                        }
                                    }
                                }
                                else if (key == 0x65706F7250746E49)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x797472) goto SkipLabel;
                                    deserializedFlag[5] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.IntProperty = reader.ReadInt32();
                                    }
                                    else
                                    {
                                        this.IntProperty = 0;
                                    }
                                }
                                else if (key == 0x6946656C62756F44)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x646C65) goto SkipLabel;
                                    deserializedFlag[25] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.DoubleField = reader.ReadDouble();
                                    }
                                    else
                                    {
                                        this.DoubleField = 0;
                                    }
                                }
                            }
                            else
                            {
                                if (key < 0x6C65694665747942)
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x6946676E69727453)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x646C65) goto SkipLabel;
                                        deserializedFlag[27] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.StringField = reader.ReadString() ?? string.Empty;
                                        }
                                        else
                                        {
                                            this.StringField = string.Empty;
                                        }
                                    }
                                    else if (key == 0x694674726F685355)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x646C65) goto SkipLabel;
                                        deserializedFlag[19] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.UShortField = reader.ReadUInt16();
                                        }
                                        else
                                        {
                                            this.UShortField = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x6C65694665747942)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x64) goto SkipLabel;
                                        deserializedFlag[16] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.ByteField = reader.ReadUInt8();
                                        }
                                        else
                                        {
                                            this.ByteField = 0;
                                        }
                                    }
                                    else if (key == 0x6C656946676E6F4C)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x64) goto SkipLabel;
                                        deserializedFlag[22] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.LongField = reader.ReadInt64();
                                        }
                                        else
                                        {
                                            this.LongField = 0;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (key < 0x706F725065747942)
                        {
                            if (key < 0x6F72506574794253)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x6C6569466C6F6F42)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x64) goto SkipLabel;
                                    deserializedFlag[15] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.BoolField = reader.ReadBoolean();
                                    }
                                    else
                                    {
                                        this.BoolField = false;
                                    }
                                }
                                else if (key == 0x6C65694672616843)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x64) goto SkipLabel;
                                    deserializedFlag[28] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.CharField = reader.ReadChar();
                                    }
                                    else
                                    {
                                        this.CharField = (char)0;
                                    }
                                }
                                else if (key == 0x6C656946746E4955)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x64) goto SkipLabel;
                                    deserializedFlag[21] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UIntField = reader.ReadUInt32();
                                    }
                                    else
                                    {
                                        this.UIntField = 0;
                                    }
                                }
                            }
                            else
                            {
                                if (key < 0x6F725074616F6C46)
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x6F72506574794253)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x7974726570) goto SkipLabel;
                                        deserializedFlag[2] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.SByteProperty = reader.ReadInt8();
                                        }
                                        else
                                        {
                                            this.SByteProperty = 0;
                                        }
                                    }
                                    else if (key == 0x6F7250676E6F4C55)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x7974726570) goto SkipLabel;
                                        deserializedFlag[8] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.ULongProperty = reader.ReadUInt64();
                                        }
                                        else
                                        {
                                            this.ULongProperty = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x6F725074616F6C46)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x7974726570) goto SkipLabel;
                                        deserializedFlag[9] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.FloatProperty = reader.ReadSingle();
                                        }
                                        else
                                        {
                                            this.FloatProperty = 0;
                                        }
                                    }
                                    else if (key == 0x6F725074726F6853)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x7974726570) goto SkipLabel;
                                        deserializedFlag[3] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.ShortProperty = reader.ReadInt16();
                                        }
                                        else
                                        {
                                            this.ShortProperty = 0;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x706F7250746E4955)
                            {
                                if (key < 0x706F72506C6F6F42)
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x706F725065747942)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265) goto SkipLabel;
                                        deserializedFlag[1] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.ByteProperty = reader.ReadUInt8();
                                        }
                                        else
                                        {
                                            this.ByteProperty = 0;
                                        }
                                    }
                                    else if (key == 0x706F7250676E6F4C)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265) goto SkipLabel;
                                        deserializedFlag[7] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.LongProperty = reader.ReadInt64();
                                        }
                                        else
                                        {
                                            this.LongProperty = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x706F72506C6F6F42)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265) goto SkipLabel;
                                        deserializedFlag[0] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.BoolProperty = reader.ReadBoolean();
                                        }
                                        else
                                        {
                                            this.BoolProperty = false;
                                        }
                                    }
                                    else if (key == 0x706F725072616843)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265) goto SkipLabel;
                                        deserializedFlag[13] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.CharProperty = reader.ReadChar();
                                        }
                                        else
                                        {
                                            this.CharProperty = (char)0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (key < 0x7250676E69727453)
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x706F7250746E4955)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265) goto SkipLabel;
                                        deserializedFlag[6] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.UIntProperty = reader.ReadUInt32();
                                        }
                                        else
                                        {
                                            this.UIntProperty = 0;
                                        }
                                    }
                                    else if (key == 0x7250656C62756F44)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265706F) goto SkipLabel;
                                        deserializedFlag[10] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.DoubleProperty = reader.ReadDouble();
                                        }
                                        else
                                        {
                                            this.DoubleProperty = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    if (utf8.Length == 0) goto SkipLabel;
                                    if (key == 0x7250676E69727453)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265706F) goto SkipLabel;
                                        deserializedFlag[12] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.StringProperty = reader.ReadString() ?? string.Empty;
                                        }
                                        else
                                        {
                                            this.StringProperty = string.Empty;
                                        }
                                    }
                                    else if (key == 0x725074726F685355)
                                    {
                                        key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                        if (utf8.Length != 0) goto SkipLabel;
                                        if (key != 0x79747265706F) goto SkipLabel;
                                        deserializedFlag[4] = true;
                                        if (!reader.TryReadNil())
                                        {
                                            this.UShortProperty = reader.ReadUInt16();
                                        }
                                        else
                                        {
                                            this.UShortProperty = 0;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }

                if (!deserializedFlag[12] && this.StringProperty == null)
                {
                    this.StringProperty = string.Empty;
                }
                if (!deserializedFlag[27] && this.StringField == null)
                {
                    this.StringField = string.Empty;
                }
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            if (this.StringProperty == null) 
            {
                this.StringProperty = string.Empty;
            }
            if (this.StringField == null) 
            {
                this.StringField = string.Empty;
            }
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 66, 111, 111, 108, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 66, 121, 116, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 83, 66, 121, 116, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 83, 104, 111, 114, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 85, 83, 104, 111, 114, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0005 => new byte[] { 73, 110, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0006 => new byte[] { 85, 73, 110, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0007 => new byte[] { 76, 111, 110, 103, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0008 => new byte[] { 85, 76, 111, 110, 103, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0009 => new byte[] { 70, 108, 111, 97, 116, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0010 => new byte[] { 68, 111, 117, 98, 108, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0011 => new byte[] { 68, 101, 99, 105, 109, 97, 108, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0012 => new byte[] { 83, 116, 114, 105, 110, 103, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0013 => new byte[] { 67, 104, 97, 114, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0014 => new byte[] { 68, 97, 116, 101, 84, 105, 109, 101, 80, 114, 111, 112, 101, 114, 116, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0015 => new byte[] { 66, 111, 111, 108, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0016 => new byte[] { 66, 121, 116, 101, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0017 => new byte[] { 83, 66, 121, 116, 101, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0018 => new byte[] { 83, 104, 111, 114, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0019 => new byte[] { 85, 83, 104, 111, 114, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0020 => new byte[] { 73, 110, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0021 => new byte[] { 85, 73, 110, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0022 => new byte[] { 76, 111, 110, 103, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0023 => new byte[] { 85, 76, 111, 110, 103, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0024 => new byte[] { 70, 108, 111, 97, 116, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0025 => new byte[] { 68, 111, 117, 98, 108, 101, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0026 => new byte[] { 68, 101, 99, 105, 109, 97, 108, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0027 => new byte[] { 83, 116, 114, 105, 110, 103, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0028 => new byte[] { 67, 104, 97, 114, 70, 105, 101, 108, 100, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0029 => new byte[] { 68, 97, 116, 101, 84, 105, 109, 101, 70, 105, 101, 108, 100, };
    }

    public partial class PrimitiveArrayClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteMapHeader(15);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0000);
            global::Tinyhand.Formatters.Builtin.SerializeBooleanArray(ref writer, this.BoolArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0001);
            writer.Write(this.ByteArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0002);
            global::Tinyhand.Formatters.Builtin.SerializeInt8Array(ref writer, this.SByteArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0003);
            global::Tinyhand.Formatters.Builtin.SerializeInt16Array(ref writer, this.ShortArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0004);
            global::Tinyhand.Formatters.Builtin.SerializeUInt16Array(ref writer, this.UShortrray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0005);
            global::Tinyhand.Formatters.Builtin.SerializeInt32Array(ref writer, this.IntArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0006);
            global::Tinyhand.Formatters.Builtin.SerializeUInt32Array(ref writer, this.UIntArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0007);
            global::Tinyhand.Formatters.Builtin.SerializeInt64Array(ref writer, this.LongArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0008);
            global::Tinyhand.Formatters.Builtin.SerializeUInt64Array(ref writer, this.ULongArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0009);
            global::Tinyhand.Formatters.Builtin.SerializeSingleArray(ref writer, this.FloatArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0010);
            global::Tinyhand.Formatters.Builtin.SerializeDoubleArray(ref writer, this.DoubleArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0011);
            global::Tinyhand.Formatters.Generated.SerializeArray_0000(ref writer, this.DecimalArray, options);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0012);
            global::Tinyhand.Formatters.Builtin.SerializeStringArray(ref writer, this.StringArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0013);
            global::Tinyhand.Formatters.Builtin.SerializeCharArray(ref writer, this.CharArray);
            writer.WriteString(PrimitiveArrayClass.__gen_utf8_key_0014);
            global::Tinyhand.Formatters.Builtin.SerializeDateTimeArray(ref writer, this.DateTimeArray);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            ulong key;
            var deserializedFlag = new bool[15];
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (key < 0x7241656C62756F44)
                    {
                        if (key < 0x617272416C6F6F42)
                        {
                            if (utf8.Length == 0) goto SkipLabel;
                            if (key == 0x416C616D69636544)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79617272) goto SkipLabel;
                                deserializedFlag[11] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.DecimalArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0000(ref reader, options) ?? System.Array.Empty<decimal>();
                                }
                                else
                                {
                                    this.DecimalArray = System.Array.Empty<decimal>();
                                }
                            }
                            else if (key == 0x6172724165747942)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79) goto SkipLabel;
                                deserializedFlag[1] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.ByteArray = reader.ReadBytesToArray();
                                }
                                else
                                {
                                    this.ByteArray = Array.Empty<byte>();
                                }
                            }
                            else if (key == 0x61727241676E6F4C)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79) goto SkipLabel;
                                deserializedFlag[7] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.LongArray = global::Tinyhand.Formatters.Builtin.DeserializeInt64Array(ref reader) ?? new long[0];
                                }
                                else
                                {
                                    this.LongArray = new long[0];
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x61727241746E4955)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x617272416C6F6F42)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    deserializedFlag[0] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.BoolArray = global::Tinyhand.Formatters.Builtin.DeserializeBooleanArray(ref reader) ?? new bool[0];
                                    }
                                    else
                                    {
                                        this.BoolArray = new bool[0];
                                    }
                                }
                                else if (key == 0x6172724172616843)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    deserializedFlag[13] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.CharArray = global::Tinyhand.Formatters.Builtin.DeserializeCharArray(ref reader) ?? new char[0];
                                    }
                                    else
                                    {
                                        this.CharArray = new char[0];
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x61727241746E4955)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    deserializedFlag[6] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UIntArray = global::Tinyhand.Formatters.Builtin.DeserializeUInt32Array(ref reader) ?? new uint[0];
                                    }
                                    else
                                    {
                                        this.UIntArray = new uint[0];
                                    }
                                }
                                else if (key == 0x656D695465746144)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961727241) goto SkipLabel;
                                    deserializedFlag[14] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.DateTimeArray = global::Tinyhand.Formatters.Builtin.DeserializeDateTimeArray(ref reader) ?? new DateTime[0];
                                    }
                                    else
                                    {
                                        this.DateTimeArray = new DateTime[0];
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (key < 0x72724174616F6C46)
                        {
                            if (key < 0x7272416574794253)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x7241656C62756F44)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x796172) goto SkipLabel;
                                    deserializedFlag[10] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.DoubleArray = global::Tinyhand.Formatters.Builtin.DeserializeDoubleArray(ref reader) ?? new double[0];
                                    }
                                    else
                                    {
                                        this.DoubleArray = new double[0];
                                    }
                                }
                                else if (key == 0x7241676E69727453)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x796172) goto SkipLabel;
                                    deserializedFlag[12] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.StringArray = global::Tinyhand.Formatters.Builtin.DeserializeStringArray(ref reader) ?? new string[0];
                                    }
                                    else
                                    {
                                        this.StringArray = new string[0];
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x7272416574794253)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[2] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.SByteArray = global::Tinyhand.Formatters.Builtin.DeserializeInt8Array(ref reader) ?? new sbyte[0];
                                    }
                                    else
                                    {
                                        this.SByteArray = new sbyte[0];
                                    }
                                }
                                else if (key == 0x727241676E6F4C55)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[8] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.ULongArray = global::Tinyhand.Formatters.Builtin.DeserializeUInt64Array(ref reader) ?? new ulong[0];
                                    }
                                    else
                                    {
                                        this.ULongArray = new ulong[0];
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x727274726F685355)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x72724174616F6C46)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[9] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.FloatArray = global::Tinyhand.Formatters.Builtin.DeserializeSingleArray(ref reader) ?? new float[0];
                                    }
                                    else
                                    {
                                        this.FloatArray = new float[0];
                                    }
                                }
                                else if (key == 0x72724174726F6853)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[3] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.ShortArray = global::Tinyhand.Formatters.Builtin.DeserializeInt16Array(ref reader) ?? new short[0];
                                    }
                                    else
                                    {
                                        this.ShortArray = new short[0];
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0)
                                {
                                    if (key != 0x7961727241746E49) goto SkipLabel;
                                    deserializedFlag[5] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.IntArray = global::Tinyhand.Formatters.Builtin.DeserializeInt32Array(ref reader) ?? new int[0];
                                    }
                                    else
                                    {
                                        this.IntArray = new int[0];
                                    }
                                }
                                else
                                {
                                    if (key != 0x727274726F685355) goto SkipLabel;
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[4] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UShortrray = global::Tinyhand.Formatters.Builtin.DeserializeUInt16Array(ref reader) ?? new ushort[0];
                                    }
                                    else
                                    {
                                        this.UShortrray = new ushort[0];
                                    }
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }

                if (!deserializedFlag[0] && this.BoolArray == null)
                {
                    this.BoolArray = new bool[0];
                }
                if (!deserializedFlag[1] && this.ByteArray == null)
                {
                    this.ByteArray = Array.Empty<byte>();
                }
                if (!deserializedFlag[2] && this.SByteArray == null)
                {
                    this.SByteArray = new sbyte[0];
                }
                if (!deserializedFlag[3] && this.ShortArray == null)
                {
                    this.ShortArray = new short[0];
                }
                if (!deserializedFlag[4] && this.UShortrray == null)
                {
                    this.UShortrray = new ushort[0];
                }
                if (!deserializedFlag[5] && this.IntArray == null)
                {
                    this.IntArray = new int[0];
                }
                if (!deserializedFlag[6] && this.UIntArray == null)
                {
                    this.UIntArray = new uint[0];
                }
                if (!deserializedFlag[7] && this.LongArray == null)
                {
                    this.LongArray = new long[0];
                }
                if (!deserializedFlag[8] && this.ULongArray == null)
                {
                    this.ULongArray = new ulong[0];
                }
                if (!deserializedFlag[9] && this.FloatArray == null)
                {
                    this.FloatArray = new float[0];
                }
                if (!deserializedFlag[10] && this.DoubleArray == null)
                {
                    this.DoubleArray = new double[0];
                }
                if (!deserializedFlag[11] && this.DecimalArray == null)
                {
                    this.DecimalArray = System.Array.Empty<decimal>();
                }
                if (!deserializedFlag[12] && this.StringArray == null)
                {
                    this.StringArray = new string[0];
                }
                if (!deserializedFlag[13] && this.CharArray == null)
                {
                    this.CharArray = new char[0];
                }
                if (!deserializedFlag[14] && this.DateTimeArray == null)
                {
                    this.DateTimeArray = new DateTime[0];
                }
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            if (this.BoolArray == null) 
            {
                this.BoolArray = new bool[0];
            }
            if (this.ByteArray == null) 
            {
                this.ByteArray = Array.Empty<byte>();
            }
            if (this.SByteArray == null) 
            {
                this.SByteArray = new sbyte[0];
            }
            if (this.ShortArray == null) 
            {
                this.ShortArray = new short[0];
            }
            if (this.UShortrray == null) 
            {
                this.UShortrray = new ushort[0];
            }
            if (this.IntArray == null) 
            {
                this.IntArray = new int[0];
            }
            if (this.UIntArray == null) 
            {
                this.UIntArray = new uint[0];
            }
            if (this.LongArray == null) 
            {
                this.LongArray = new long[0];
            }
            if (this.ULongArray == null) 
            {
                this.ULongArray = new ulong[0];
            }
            if (this.FloatArray == null) 
            {
                this.FloatArray = new float[0];
            }
            if (this.DoubleArray == null) 
            {
                this.DoubleArray = new double[0];
            }
            if (this.DecimalArray == null) 
            {
                this.DecimalArray = System.Array.Empty<decimal>();
            }
            if (this.StringArray == null) 
            {
                this.StringArray = new string[0];
            }
            if (this.CharArray == null) 
            {
                this.CharArray = new char[0];
            }
            if (this.DateTimeArray == null) 
            {
                this.DateTimeArray = new DateTime[0];
            }
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 66, 111, 111, 108, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 66, 121, 116, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 83, 66, 121, 116, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 83, 104, 111, 114, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 85, 83, 104, 111, 114, 116, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0005 => new byte[] { 73, 110, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0006 => new byte[] { 85, 73, 110, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0007 => new byte[] { 76, 111, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0008 => new byte[] { 85, 76, 111, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0009 => new byte[] { 70, 108, 111, 97, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0010 => new byte[] { 68, 111, 117, 98, 108, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0011 => new byte[] { 68, 101, 99, 105, 109, 97, 108, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0012 => new byte[] { 83, 116, 114, 105, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0013 => new byte[] { 67, 104, 97, 114, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0014 => new byte[] { 68, 97, 116, 101, 84, 105, 109, 101, 65, 114, 114, 97, 121, };
    }

    public partial class PrimitiveNullableArrayClass : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteMapHeader(15);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0000);
            global::Tinyhand.Formatters.Generated.SerializeArray_0001(ref writer, this.BoolArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0001);
            global::Tinyhand.Formatters.Generated.SerializeArray_0002(ref writer, this.ByteArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0002);
            global::Tinyhand.Formatters.Generated.SerializeArray_0003(ref writer, this.SByteArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0003);
            global::Tinyhand.Formatters.Generated.SerializeArray_0004(ref writer, this.ShortArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0004);
            global::Tinyhand.Formatters.Generated.SerializeArray_0005(ref writer, this.UShortrray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0005);
            global::Tinyhand.Formatters.Generated.SerializeArray_0006(ref writer, this.IntArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0006);
            global::Tinyhand.Formatters.Generated.SerializeArray_0007(ref writer, this.UIntArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0007);
            global::Tinyhand.Formatters.Generated.SerializeArray_0008(ref writer, this.LongArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0008);
            global::Tinyhand.Formatters.Generated.SerializeArray_0009(ref writer, this.ULongArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0009);
            global::Tinyhand.Formatters.Generated.SerializeArray_0010(ref writer, this.FloatArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0010);
            global::Tinyhand.Formatters.Generated.SerializeArray_0011(ref writer, this.DoubleArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0011);
            global::Tinyhand.Formatters.Generated.SerializeArray_0012(ref writer, this.DecimalArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0012);
            global::Tinyhand.Formatters.Builtin.SerializeNullableStringArray(ref writer, this.StringArray);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0013);
            global::Tinyhand.Formatters.Generated.SerializeArray_0013(ref writer, this.CharArray, options);
            writer.WriteString(PrimitiveNullableArrayClass.__gen_utf8_key_0014);
            global::Tinyhand.Formatters.Generated.SerializeArray_0014(ref writer, this.DateTimeArray, options);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            ulong key;
            var deserializedFlag = new bool[15];
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (key < 0x7241656C62756F44)
                    {
                        if (key < 0x617272416C6F6F42)
                        {
                            if (utf8.Length == 0) goto SkipLabel;
                            if (key == 0x416C616D69636544)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79617272) goto SkipLabel;
                                deserializedFlag[11] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.DecimalArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0012(ref reader, options) ?? System.Array.Empty<decimal?>();
                                }
                                else
                                {
                                    this.DecimalArray = System.Array.Empty<decimal?>();
                                }
                            }
                            else if (key == 0x6172724165747942)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79) goto SkipLabel;
                                deserializedFlag[1] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.ByteArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0002(ref reader, options) ?? System.Array.Empty<byte?>();
                                }
                                else
                                {
                                    this.ByteArray = System.Array.Empty<byte?>();
                                }
                            }
                            else if (key == 0x61727241676E6F4C)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79) goto SkipLabel;
                                deserializedFlag[7] = true;
                                if (!reader.TryReadNil())
                                {
                                    this.LongArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0008(ref reader, options) ?? System.Array.Empty<long?>();
                                }
                                else
                                {
                                    this.LongArray = System.Array.Empty<long?>();
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x61727241746E4955)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x617272416C6F6F42)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    deserializedFlag[0] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.BoolArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0001(ref reader, options) ?? System.Array.Empty<bool?>();
                                    }
                                    else
                                    {
                                        this.BoolArray = System.Array.Empty<bool?>();
                                    }
                                }
                                else if (key == 0x6172724172616843)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    deserializedFlag[13] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.CharArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0013(ref reader, options) ?? System.Array.Empty<char?>();
                                    }
                                    else
                                    {
                                        this.CharArray = System.Array.Empty<char?>();
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x61727241746E4955)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    deserializedFlag[6] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UIntArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0007(ref reader, options) ?? System.Array.Empty<uint?>();
                                    }
                                    else
                                    {
                                        this.UIntArray = System.Array.Empty<uint?>();
                                    }
                                }
                                else if (key == 0x656D695465746144)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961727241) goto SkipLabel;
                                    deserializedFlag[14] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.DateTimeArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0014(ref reader, options) ?? System.Array.Empty<System.DateTime?>();
                                    }
                                    else
                                    {
                                        this.DateTimeArray = System.Array.Empty<System.DateTime?>();
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (key < 0x72724174616F6C46)
                        {
                            if (key < 0x7272416574794253)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x7241656C62756F44)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x796172) goto SkipLabel;
                                    deserializedFlag[10] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.DoubleArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0011(ref reader, options) ?? System.Array.Empty<double?>();
                                    }
                                    else
                                    {
                                        this.DoubleArray = System.Array.Empty<double?>();
                                    }
                                }
                                else if (key == 0x7241676E69727453)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x796172) goto SkipLabel;
                                    deserializedFlag[12] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.StringArray = global::Tinyhand.Formatters.Builtin.DeserializeNullableStringArray(ref reader) ?? new string[0];
                                    }
                                    else
                                    {
                                        this.StringArray = new string[0];
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x7272416574794253)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[2] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.SByteArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0003(ref reader, options) ?? System.Array.Empty<sbyte?>();
                                    }
                                    else
                                    {
                                        this.SByteArray = System.Array.Empty<sbyte?>();
                                    }
                                }
                                else if (key == 0x727241676E6F4C55)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[8] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.ULongArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0009(ref reader, options) ?? System.Array.Empty<ulong?>();
                                    }
                                    else
                                    {
                                        this.ULongArray = System.Array.Empty<ulong?>();
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x727274726F685355)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x72724174616F6C46)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[9] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.FloatArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0010(ref reader, options) ?? System.Array.Empty<float?>();
                                    }
                                    else
                                    {
                                        this.FloatArray = System.Array.Empty<float?>();
                                    }
                                }
                                else if (key == 0x72724174726F6853)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[3] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.ShortArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0004(ref reader, options) ?? System.Array.Empty<short?>();
                                    }
                                    else
                                    {
                                        this.ShortArray = System.Array.Empty<short?>();
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0)
                                {
                                    if (key != 0x7961727241746E49) goto SkipLabel;
                                    deserializedFlag[5] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.IntArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0006(ref reader, options) ?? System.Array.Empty<int?>();
                                    }
                                    else
                                    {
                                        this.IntArray = System.Array.Empty<int?>();
                                    }
                                }
                                else
                                {
                                    if (key != 0x727274726F685355) goto SkipLabel;
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    deserializedFlag[4] = true;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UShortrray = global::Tinyhand.Formatters.Generated.DeserializeArray_0005(ref reader, options) ?? System.Array.Empty<ushort?>();
                                    }
                                    else
                                    {
                                        this.UShortrray = System.Array.Empty<ushort?>();
                                    }
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }

                if (!deserializedFlag[0] && this.BoolArray == null)
                {
                    this.BoolArray = System.Array.Empty<bool?>();
                }
                if (!deserializedFlag[1] && this.ByteArray == null)
                {
                    this.ByteArray = System.Array.Empty<byte?>();
                }
                if (!deserializedFlag[2] && this.SByteArray == null)
                {
                    this.SByteArray = System.Array.Empty<sbyte?>();
                }
                if (!deserializedFlag[3] && this.ShortArray == null)
                {
                    this.ShortArray = System.Array.Empty<short?>();
                }
                if (!deserializedFlag[4] && this.UShortrray == null)
                {
                    this.UShortrray = System.Array.Empty<ushort?>();
                }
                if (!deserializedFlag[5] && this.IntArray == null)
                {
                    this.IntArray = System.Array.Empty<int?>();
                }
                if (!deserializedFlag[6] && this.UIntArray == null)
                {
                    this.UIntArray = System.Array.Empty<uint?>();
                }
                if (!deserializedFlag[7] && this.LongArray == null)
                {
                    this.LongArray = System.Array.Empty<long?>();
                }
                if (!deserializedFlag[8] && this.ULongArray == null)
                {
                    this.ULongArray = System.Array.Empty<ulong?>();
                }
                if (!deserializedFlag[9] && this.FloatArray == null)
                {
                    this.FloatArray = System.Array.Empty<float?>();
                }
                if (!deserializedFlag[10] && this.DoubleArray == null)
                {
                    this.DoubleArray = System.Array.Empty<double?>();
                }
                if (!deserializedFlag[11] && this.DecimalArray == null)
                {
                    this.DecimalArray = System.Array.Empty<decimal?>();
                }
                if (!deserializedFlag[12] && this.StringArray == null)
                {
                    this.StringArray = new string[0];
                }
                if (!deserializedFlag[13] && this.CharArray == null)
                {
                    this.CharArray = System.Array.Empty<char?>();
                }
                if (!deserializedFlag[14] && this.DateTimeArray == null)
                {
                    this.DateTimeArray = System.Array.Empty<System.DateTime?>();
                }
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
            if (this.BoolArray == null) 
            {
                this.BoolArray = System.Array.Empty<bool?>();
            }
            if (this.ByteArray == null) 
            {
                this.ByteArray = System.Array.Empty<byte?>();
            }
            if (this.SByteArray == null) 
            {
                this.SByteArray = System.Array.Empty<sbyte?>();
            }
            if (this.ShortArray == null) 
            {
                this.ShortArray = System.Array.Empty<short?>();
            }
            if (this.UShortrray == null) 
            {
                this.UShortrray = System.Array.Empty<ushort?>();
            }
            if (this.IntArray == null) 
            {
                this.IntArray = System.Array.Empty<int?>();
            }
            if (this.UIntArray == null) 
            {
                this.UIntArray = System.Array.Empty<uint?>();
            }
            if (this.LongArray == null) 
            {
                this.LongArray = System.Array.Empty<long?>();
            }
            if (this.ULongArray == null) 
            {
                this.ULongArray = System.Array.Empty<ulong?>();
            }
            if (this.FloatArray == null) 
            {
                this.FloatArray = System.Array.Empty<float?>();
            }
            if (this.DoubleArray == null) 
            {
                this.DoubleArray = System.Array.Empty<double?>();
            }
            if (this.DecimalArray == null) 
            {
                this.DecimalArray = System.Array.Empty<decimal?>();
            }
            if (this.StringArray == null) 
            {
                this.StringArray = new string[0];
            }
            if (this.CharArray == null) 
            {
                this.CharArray = System.Array.Empty<char?>();
            }
            if (this.DateTimeArray == null) 
            {
                this.DateTimeArray = System.Array.Empty<System.DateTime?>();
            }
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 66, 111, 111, 108, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 66, 121, 116, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 83, 66, 121, 116, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 83, 104, 111, 114, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 85, 83, 104, 111, 114, 116, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0005 => new byte[] { 73, 110, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0006 => new byte[] { 85, 73, 110, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0007 => new byte[] { 76, 111, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0008 => new byte[] { 85, 76, 111, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0009 => new byte[] { 70, 108, 111, 97, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0010 => new byte[] { 68, 111, 117, 98, 108, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0011 => new byte[] { 68, 101, 99, 105, 109, 97, 108, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0012 => new byte[] { 83, 116, 114, 105, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0013 => new byte[] { 67, 104, 97, 114, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0014 => new byte[] { 68, 97, 116, 101, 84, 105, 109, 101, 65, 114, 114, 97, 121, };
    }

    public partial class PrimitiveNullableArrayClass2 : ITinyhandSerialize, ITinyhandReconstruct
    {
        public void Serialize(ref TinyhandWriter writer, TinyhandSerializerOptions options)
        {
            writer.WriteMapHeader(15);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0000);
            global::Tinyhand.Formatters.Generated.SerializeArray_0001(ref writer, this.BoolArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0001);
            global::Tinyhand.Formatters.Generated.SerializeArray_0002(ref writer, this.ByteArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0002);
            global::Tinyhand.Formatters.Generated.SerializeArray_0003(ref writer, this.SByteArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0003);
            global::Tinyhand.Formatters.Generated.SerializeArray_0004(ref writer, this.ShortArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0004);
            global::Tinyhand.Formatters.Generated.SerializeArray_0005(ref writer, this.UShortrray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0005);
            global::Tinyhand.Formatters.Generated.SerializeArray_0006(ref writer, this.IntArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0006);
            global::Tinyhand.Formatters.Generated.SerializeArray_0007(ref writer, this.UIntArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0007);
            global::Tinyhand.Formatters.Generated.SerializeArray_0008(ref writer, this.LongArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0008);
            global::Tinyhand.Formatters.Generated.SerializeArray_0009(ref writer, this.ULongArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0009);
            global::Tinyhand.Formatters.Generated.SerializeArray_0010(ref writer, this.FloatArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0010);
            global::Tinyhand.Formatters.Generated.SerializeArray_0011(ref writer, this.DoubleArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0011);
            global::Tinyhand.Formatters.Generated.SerializeArray_0012(ref writer, this.DecimalArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0012);
            global::Tinyhand.Formatters.Generated.SerializeArray_0015(ref writer, this.StringArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0013);
            global::Tinyhand.Formatters.Generated.SerializeArray_0013(ref writer, this.CharArray, options);
            writer.WriteString(PrimitiveNullableArrayClass2.__gen_utf8_key_0014);
            global::Tinyhand.Formatters.Generated.SerializeArray_0014(ref writer, this.DateTimeArray, options);
        }
        public void Deserialize(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            ulong key;
            var numberOfData = reader.ReadMapHeader();
            options.Security.DepthStep(ref reader);
            try
            {
                while (numberOfData-- > 0)
                {
                    var utf8 = reader.ReadStringSpan();
                    if (utf8.Length == 0)
                    {
                        goto SkipLabel;
                    }
                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                    if (key < 0x7241656C62756F44)
                    {
                        if (key < 0x617272416C6F6F42)
                        {
                            if (utf8.Length == 0) goto SkipLabel;
                            if (key == 0x416C616D69636544)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79617272) goto SkipLabel;
                                if (!reader.TryReadNil())
                                {
                                    this.DecimalArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0012(ref reader, options);
                                }
                            }
                            else if (key == 0x6172724165747942)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79) goto SkipLabel;
                                if (!reader.TryReadNil())
                                {
                                    this.ByteArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0002(ref reader, options);
                                }
                            }
                            else if (key == 0x61727241676E6F4C)
                            {
                                key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                if (utf8.Length != 0) goto SkipLabel;
                                if (key != 0x79) goto SkipLabel;
                                if (!reader.TryReadNil())
                                {
                                    this.LongArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0008(ref reader, options);
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x61727241746E4955)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x617272416C6F6F42)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.BoolArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0001(ref reader, options);
                                    }
                                }
                                else if (key == 0x6172724172616843)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.CharArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0013(ref reader, options);
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x61727241746E4955)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x79) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UIntArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0007(ref reader, options);
                                    }
                                }
                                else if (key == 0x656D695465746144)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961727241) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.DateTimeArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0014(ref reader, options);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (key < 0x72724174616F6C46)
                        {
                            if (key < 0x7272416574794253)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x7241656C62756F44)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x796172) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.DoubleArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0011(ref reader, options);
                                    }
                                }
                                else if (key == 0x7241676E69727453)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x796172) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.StringArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0015(ref reader, options);
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x7272416574794253)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.SByteArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0003(ref reader, options);
                                    }
                                }
                                else if (key == 0x727241676E6F4C55)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.ULongArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0009(ref reader, options);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (key < 0x727274726F685355)
                            {
                                if (utf8.Length == 0) goto SkipLabel;
                                if (key == 0x72724174616F6C46)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.FloatArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0010(ref reader, options);
                                    }
                                }
                                else if (key == 0x72724174726F6853)
                                {
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.ShortArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0004(ref reader, options);
                                    }
                                }
                            }
                            else
                            {
                                if (utf8.Length == 0)
                                {
                                    if (key != 0x7961727241746E49) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.IntArray = global::Tinyhand.Formatters.Generated.DeserializeArray_0006(ref reader, options);
                                    }
                                }
                                else
                                {
                                    if (key != 0x727274726F685355) goto SkipLabel;
                                    key = global::Tinyhand.Generator.AutomataKey.GetKey(ref utf8);
                                    if (utf8.Length != 0) goto SkipLabel;
                                    if (key != 0x7961) goto SkipLabel;
                                    if (!reader.TryReadNil())
                                    {
                                        this.UShortrray = global::Tinyhand.Formatters.Generated.DeserializeArray_0005(ref reader, options);
                                    }
                                }
                            }
                        }
                    }
                    continue;
SkipLabel:
                    reader.Skip();
                }
            }
            finally { reader.Depth--; }
        }
        public void Reconstruct(TinyhandSerializerOptions options)
        {
        }

        private static ReadOnlySpan<byte> __gen_utf8_key_0000 => new byte[] { 66, 111, 111, 108, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0001 => new byte[] { 66, 121, 116, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0002 => new byte[] { 83, 66, 121, 116, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0003 => new byte[] { 83, 104, 111, 114, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0004 => new byte[] { 85, 83, 104, 111, 114, 116, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0005 => new byte[] { 73, 110, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0006 => new byte[] { 85, 73, 110, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0007 => new byte[] { 76, 111, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0008 => new byte[] { 85, 76, 111, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0009 => new byte[] { 70, 108, 111, 97, 116, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0010 => new byte[] { 68, 111, 117, 98, 108, 101, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0011 => new byte[] { 68, 101, 99, 105, 109, 97, 108, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0012 => new byte[] { 83, 116, 114, 105, 110, 103, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0013 => new byte[] { 67, 104, 97, 114, 65, 114, 114, 97, 121, };
        private static ReadOnlySpan<byte> __gen_utf8_key_0014 => new byte[] { 68, 97, 116, 101, 84, 105, 109, 101, 65, 114, 114, 97, 121, };
    }
}
