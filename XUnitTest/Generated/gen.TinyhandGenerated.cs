// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8774

namespace Tinyhand.Formatters
{
    static class Generated
    {
        internal static void SerializeArray_0000(ref TinyhandWriter writer, decimal[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    options.Resolver.GetFormatter<decimal>().Serialize(ref writer, value[i], options);
                }
            }
        }
        internal static decimal[]? DeserializeArray_0000(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new decimal[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = options.Resolver.GetFormatter<decimal>().Deserialize(ref reader, options);
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0001(ref TinyhandWriter writer, bool?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static bool?[]? DeserializeArray_0001(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new bool?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadBoolean();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0002(ref TinyhandWriter writer, byte?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static byte?[]? DeserializeArray_0002(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new byte?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt8();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0003(ref TinyhandWriter writer, sbyte?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static sbyte?[]? DeserializeArray_0003(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new sbyte?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt8();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0004(ref TinyhandWriter writer, short?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static short?[]? DeserializeArray_0004(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new short?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt16();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0005(ref TinyhandWriter writer, ushort?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static ushort?[]? DeserializeArray_0005(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new ushort?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt16();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0006(ref TinyhandWriter writer, int?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static int?[]? DeserializeArray_0006(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new int?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt32();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0007(ref TinyhandWriter writer, uint?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static uint?[]? DeserializeArray_0007(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new uint?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt32();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0008(ref TinyhandWriter writer, long?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static long?[]? DeserializeArray_0008(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new long?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt64();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0009(ref TinyhandWriter writer, ulong?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static ulong?[]? DeserializeArray_0009(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new ulong?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt64();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0010(ref TinyhandWriter writer, float?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static float?[]? DeserializeArray_0010(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new float?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadSingle();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0011(ref TinyhandWriter writer, double?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static double?[]? DeserializeArray_0011(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new double?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadDouble();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0012(ref TinyhandWriter writer, decimal?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    options.Resolver.GetFormatter<decimal?>().Serialize(ref writer, value[i], options);
                }
            }
        }
        internal static decimal?[]? DeserializeArray_0012(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new decimal?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = options.Resolver.GetFormatter<decimal?>().Deserialize(ref reader, options);
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0013(ref TinyhandWriter writer, char?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static char?[]? DeserializeArray_0013(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new char?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadChar();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0014(ref TinyhandWriter writer, System.DateTime?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static System.DateTime?[]? DeserializeArray_0014(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new System.DateTime?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadDateTime();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0015(ref TinyhandWriter writer, string?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    writer.Write(value[i]);
                }
            }
        }
        internal static string?[]? DeserializeArray_0015(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new string?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = reader.ReadString();
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        [ModuleInitializer]
        internal static void __gen__load()
        {
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.SimpleIntKeyData>(new __gen__tf__0002());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.SimpleStringKeyData>(new __gen__tf__0003());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.SimpleStructIntKeyData>(new __gen__tf__0004());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.SimpleStructStringKeyData>(new __gen__tf__0005());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Vector2>(new __gen__tf__0006());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.EmptyClass>(new __gen__tf__0007());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.EmptyStruct>(new __gen__tf__0008());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Version1>(new __gen__tf__0009());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Version2>(new __gen__tf__0010());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Version0>(new __gen__tf__0011());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.HolderV1>(new __gen__tf__0012());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.HolderV2>(new __gen__tf__0013());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.HolderV0>(new __gen__tf__0014());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Callback1>(new __gen__tf__0015());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Callback1_2>(new __gen__tf__0016());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Callback2>(new __gen__tf__0017());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Callback2_2>(new __gen__tf__0018());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.MyClass>(new __gen__tf__0019());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Empty1>(new __gen__tf__0020());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.Empty2>(new __gen__tf__0021());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.NonEmpty1>(new __gen__tf__0022());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.NonEmpty2>(new __gen__tf__0023());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.VersionBlockTest>(new __gen__tf__0024());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.UnVersionBlockTest>(new __gen__tf__0025());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.WithIndexer>(new __gen__tf__0027());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.PrimitiveIntKeyClass>(new __gen__tf__0028());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.PrimitiveStringKeyClass>(new __gen__tf__0029());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.PrimitiveArrayClass>(new __gen__tf__0030());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.PrimitiveNullableArrayClass>(new __gen__tf__0031());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.PrimitiveNullableArrayClass2>(new __gen__tf__0032());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.GenericClass<int, string>>(new __gen__tf__0033());
            GeneratedResolver.Instance.SetFormatter<Tinyhand.Tests.GenericStruct<int, string>>(new __gen__tf__0034());
        }

        class __gen__tf__0002: ITinyhandFormatter<Tinyhand.Tests.SimpleIntKeyData>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.SimpleIntKeyData? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.SimpleIntKeyData? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.SimpleIntKeyData();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.SimpleIntKeyData Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.SimpleIntKeyData();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0003: ITinyhandFormatter<Tinyhand.Tests.SimpleStringKeyData>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.SimpleStringKeyData? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.SimpleStringKeyData? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.SimpleStringKeyData();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.SimpleStringKeyData Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.SimpleStringKeyData();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0004: ITinyhandFormatter<Tinyhand.Tests.SimpleStructIntKeyData>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.SimpleStructIntKeyData v, TinyhandSerializerOptions o)
            {
                v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.SimpleStructIntKeyData Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.SimpleStructIntKeyData();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.SimpleStructIntKeyData Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.SimpleStructIntKeyData();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0005: ITinyhandFormatter<Tinyhand.Tests.SimpleStructStringKeyData>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.SimpleStructStringKeyData v, TinyhandSerializerOptions o)
            {
                v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.SimpleStructStringKeyData Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.SimpleStructStringKeyData();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.SimpleStructStringKeyData Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.SimpleStructStringKeyData();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0006: ITinyhandFormatter<Tinyhand.Tests.Vector2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Vector2 v, TinyhandSerializerOptions o)
            {
                v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Vector2 Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Vector2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Vector2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Vector2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0007: ITinyhandFormatter<Tinyhand.Tests.EmptyClass>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.EmptyClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.EmptyClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.EmptyClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.EmptyClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.EmptyClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0008: ITinyhandFormatter<Tinyhand.Tests.EmptyStruct>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.EmptyStruct v, TinyhandSerializerOptions o)
            {
                v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.EmptyStruct Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.EmptyStruct();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.EmptyStruct Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.EmptyStruct();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0009: ITinyhandFormatter<Tinyhand.Tests.Version1>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Version1? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Version1? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.Version1();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Version1 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Version1();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0010: ITinyhandFormatter<Tinyhand.Tests.Version2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Version2? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Version2? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.Version2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Version2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Version2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0011: ITinyhandFormatter<Tinyhand.Tests.Version0>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Version0? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Version0? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.Version0();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Version0 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Version0();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0012: ITinyhandFormatter<Tinyhand.Tests.HolderV1>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.HolderV1? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.HolderV1? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.HolderV1();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.HolderV1 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.HolderV1();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0013: ITinyhandFormatter<Tinyhand.Tests.HolderV2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.HolderV2? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.HolderV2? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.HolderV2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.HolderV2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.HolderV2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0014: ITinyhandFormatter<Tinyhand.Tests.HolderV0>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.HolderV0? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.HolderV0? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.HolderV0();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.HolderV0 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.HolderV0();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0015: ITinyhandFormatter<Tinyhand.Tests.Callback1>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Callback1? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Callback1? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.Callback1();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Callback1 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Callback1();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0016: ITinyhandFormatter<Tinyhand.Tests.Callback1_2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Callback1_2? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Callback1_2? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.Callback1_2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Callback1_2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Callback1_2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0017: ITinyhandFormatter<Tinyhand.Tests.Callback2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Callback2 v, TinyhandSerializerOptions o)
            {
                v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Callback2 Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Callback2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Callback2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Callback2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0018: ITinyhandFormatter<Tinyhand.Tests.Callback2_2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Callback2_2 v, TinyhandSerializerOptions o)
            {
                v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Callback2_2 Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Callback2_2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Callback2_2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Callback2_2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0019: ITinyhandFormatter<Tinyhand.Tests.MyClass>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.MyClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.MyClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.MyClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.MyClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.MyClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0020: ITinyhandFormatter<Tinyhand.Tests.Empty1>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Empty1? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Empty1? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.Empty1();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Empty1 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Empty1();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0021: ITinyhandFormatter<Tinyhand.Tests.Empty2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.Empty2? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.Empty2? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.Empty2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.Empty2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.Empty2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0022: ITinyhandFormatter<Tinyhand.Tests.NonEmpty1>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.NonEmpty1? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.NonEmpty1? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.NonEmpty1();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.NonEmpty1 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.NonEmpty1();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0023: ITinyhandFormatter<Tinyhand.Tests.NonEmpty2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.NonEmpty2? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.NonEmpty2? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.NonEmpty2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.NonEmpty2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.NonEmpty2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0024: ITinyhandFormatter<Tinyhand.Tests.VersionBlockTest>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.VersionBlockTest? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.VersionBlockTest? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.VersionBlockTest();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.VersionBlockTest Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.VersionBlockTest();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0025: ITinyhandFormatter<Tinyhand.Tests.UnVersionBlockTest>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.UnVersionBlockTest? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.UnVersionBlockTest? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.UnVersionBlockTest();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.UnVersionBlockTest Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.UnVersionBlockTest();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0027: ITinyhandFormatter<Tinyhand.Tests.WithIndexer>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.WithIndexer? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.WithIndexer? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.WithIndexer();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.WithIndexer Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.WithIndexer();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0028: ITinyhandFormatter<Tinyhand.Tests.PrimitiveIntKeyClass>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.PrimitiveIntKeyClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.PrimitiveIntKeyClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.PrimitiveIntKeyClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.PrimitiveIntKeyClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.PrimitiveIntKeyClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0029: ITinyhandFormatter<Tinyhand.Tests.PrimitiveStringKeyClass>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.PrimitiveStringKeyClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.PrimitiveStringKeyClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.PrimitiveStringKeyClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.PrimitiveStringKeyClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.PrimitiveStringKeyClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0030: ITinyhandFormatter<Tinyhand.Tests.PrimitiveArrayClass>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.PrimitiveArrayClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.PrimitiveArrayClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.PrimitiveArrayClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.PrimitiveArrayClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.PrimitiveArrayClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0031: ITinyhandFormatter<Tinyhand.Tests.PrimitiveNullableArrayClass>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.PrimitiveNullableArrayClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.PrimitiveNullableArrayClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.PrimitiveNullableArrayClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.PrimitiveNullableArrayClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.PrimitiveNullableArrayClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0032: ITinyhandFormatter<Tinyhand.Tests.PrimitiveNullableArrayClass2>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.PrimitiveNullableArrayClass2? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public Tinyhand.Tests.PrimitiveNullableArrayClass2? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new Tinyhand.Tests.PrimitiveNullableArrayClass2();
                v.Deserialize(ref r, o);
                return v;
            }
            public Tinyhand.Tests.PrimitiveNullableArrayClass2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new Tinyhand.Tests.PrimitiveNullableArrayClass2();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0033: ITinyhandFormatter<Tinyhand.Tests.GenericClass<int, string>>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.GenericClass<int, string>? v, TinyhandSerializerOptions o) => Tinyhand.Tests.GenericClass<int, string>.Serialize(ref w, v, o);
            public Tinyhand.Tests.GenericClass<int, string>? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o) => Tinyhand.Tests.GenericClass<int, string>.Deserialize(ref r, o);
            public Tinyhand.Tests.GenericClass<int, string> Reconstruct(TinyhandSerializerOptions o) => Tinyhand.Tests.GenericClass<int, string>.Reconstruct(o);
        }
        class __gen__tf__0034: ITinyhandFormatter<Tinyhand.Tests.GenericStruct<int, string>>
        {
            public void Serialize(ref TinyhandWriter w, Tinyhand.Tests.GenericStruct<int, string> v, TinyhandSerializerOptions o) => Tinyhand.Tests.GenericStruct<int, string>.Serialize(ref w, v, o);
            public Tinyhand.Tests.GenericStruct<int, string> Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o) => Tinyhand.Tests.GenericStruct<int, string>.Deserialize(ref r, o);
            public Tinyhand.Tests.GenericStruct<int, string> Reconstruct(TinyhandSerializerOptions o) => Tinyhand.Tests.GenericStruct<int, string>.Reconstruct(o);
        }
    }
}
