using System;
using System.Runtime.CompilerServices;
using Tinyhand;
using Tinyhand.IO;
using Tinyhand.Resolvers;

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591

namespace Tinyhand.Formatters
{
    static class Generated
    {
        internal static void SerializeArray_0000(ref TinyhandWriter writer, decimal[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    options.Resolver.GetFormatter<decimal>().Serialize(ref writer, value[i], options);
                }
            }
        }
        internal static decimal[]? DeserializeArray_0000(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new decimal[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = options.Resolver.GetFormatter<decimal>().Deserialize(ref reader, options);
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0001(ref TinyhandWriter writer, bool?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static bool?[]? DeserializeArray_0001(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new bool?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadBoolean();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0002(ref TinyhandWriter writer, byte?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static byte?[]? DeserializeArray_0002(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new byte?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt8();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0003(ref TinyhandWriter writer, sbyte?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static sbyte?[]? DeserializeArray_0003(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new sbyte?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt8();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0004(ref TinyhandWriter writer, short?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static short?[]? DeserializeArray_0004(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new short?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt16();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0005(ref TinyhandWriter writer, ushort?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static ushort?[]? DeserializeArray_0005(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new ushort?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt16();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0006(ref TinyhandWriter writer, int?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static int?[]? DeserializeArray_0006(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new int?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt32();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0007(ref TinyhandWriter writer, uint?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static uint?[]? DeserializeArray_0007(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new uint?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt32();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0008(ref TinyhandWriter writer, long?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static long?[]? DeserializeArray_0008(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new long?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadInt64();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0009(ref TinyhandWriter writer, ulong?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static ulong?[]? DeserializeArray_0009(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new ulong?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadUInt64();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0010(ref TinyhandWriter writer, float?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static float?[]? DeserializeArray_0010(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new float?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadSingle();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0011(ref TinyhandWriter writer, double?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static double?[]? DeserializeArray_0011(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new double?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadDouble();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0012(ref TinyhandWriter writer, decimal?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    options.Resolver.GetFormatter<decimal?>().Serialize(ref writer, value[i], options);
                }
            }
        }
        internal static decimal?[]? DeserializeArray_0012(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new decimal?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = options.Resolver.GetFormatter<decimal?>().Deserialize(ref reader, options);
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0013(ref TinyhandWriter writer, char?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static char?[]? DeserializeArray_0013(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new char?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadChar();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0014(ref TinyhandWriter writer, System.DateTime?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    if (!value[i].HasValue)
                    {
                        writer.WriteNil();
                    }
                    else
                    {
                        writer.Write(value[i]!.Value);
                    }
                }
            }
        }
        internal static System.DateTime?[]? DeserializeArray_0014(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new System.DateTime?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    if (reader.TryReadNil())
                    {
                        array[i] = default;
                    }
                    else
                    {
                        array[i] = reader.ReadDateTime();
                    }
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        internal static void SerializeArray_0015(ref TinyhandWriter writer, string?[]? value, TinyhandSerializerOptions options)
        {
            if (value == null) writer.WriteNil();
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    writer.Write(value[i]);
                }
            }
        }
        internal static string?[]? DeserializeArray_0015(ref TinyhandReader reader, TinyhandSerializerOptions options)
        {
            var len = reader.ReadArrayHeader();
            var array = new string?[len];
            options.Security.DepthStep(ref reader);
            try
            {
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = reader.ReadString();
                }
            }
            finally
            {
                reader.Depth--;
            }
            return array;
        }
        
        [ModuleInitializer]
        internal static void __gen__load()
        {
            GeneratedResolver.Instance.SetFormatter<XUnitTest.PrimitiveIntKeyClass>(new __gen__tf__0000());
            GeneratedResolver.Instance.SetFormatter<XUnitTest.PrimitiveStringKeyClass>(new __gen__tf__0001());
            GeneratedResolver.Instance.SetFormatter<XUnitTest.PrimitiveArrayClass>(new __gen__tf__0002());
            GeneratedResolver.Instance.SetFormatter<XUnitTest.PrimitiveNullableArrayClass>(new __gen__tf__0003());
            GeneratedResolver.Instance.SetFormatter<XUnitTest.PrimitiveNullableArrayClass2>(new __gen__tf__0004());
        }

        class __gen__tf__0000: ITinyhandFormatter<XUnitTest.PrimitiveIntKeyClass>
        {
            public void Serialize(ref TinyhandWriter w, XUnitTest.PrimitiveIntKeyClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public XUnitTest.PrimitiveIntKeyClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new XUnitTest.PrimitiveIntKeyClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public XUnitTest.PrimitiveIntKeyClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new XUnitTest.PrimitiveIntKeyClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0001: ITinyhandFormatter<XUnitTest.PrimitiveStringKeyClass>
        {
            public void Serialize(ref TinyhandWriter w, XUnitTest.PrimitiveStringKeyClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public XUnitTest.PrimitiveStringKeyClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new XUnitTest.PrimitiveStringKeyClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public XUnitTest.PrimitiveStringKeyClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new XUnitTest.PrimitiveStringKeyClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0002: ITinyhandFormatter<XUnitTest.PrimitiveArrayClass>
        {
            public void Serialize(ref TinyhandWriter w, XUnitTest.PrimitiveArrayClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public XUnitTest.PrimitiveArrayClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new XUnitTest.PrimitiveArrayClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public XUnitTest.PrimitiveArrayClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new XUnitTest.PrimitiveArrayClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0003: ITinyhandFormatter<XUnitTest.PrimitiveNullableArrayClass>
        {
            public void Serialize(ref TinyhandWriter w, XUnitTest.PrimitiveNullableArrayClass? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public XUnitTest.PrimitiveNullableArrayClass? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new XUnitTest.PrimitiveNullableArrayClass();
                v.Deserialize(ref r, o);
                return v;
            }
            public XUnitTest.PrimitiveNullableArrayClass Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new XUnitTest.PrimitiveNullableArrayClass();
                v.Reconstruct(o);
                return v;
            }
        }
        class __gen__tf__0004: ITinyhandFormatter<XUnitTest.PrimitiveNullableArrayClass2>
        {
            public void Serialize(ref TinyhandWriter w, XUnitTest.PrimitiveNullableArrayClass2? v, TinyhandSerializerOptions o)
            {
                if (v == null) w.WriteNil();
                else v.Serialize(ref w, o);
            }
            public XUnitTest.PrimitiveNullableArrayClass2? Deserialize(ref TinyhandReader r, TinyhandSerializerOptions o)
            {
                if (r.TryReadNil()) return default;
                var v = new XUnitTest.PrimitiveNullableArrayClass2();
                v.Deserialize(ref r, o);
                return v;
            }
            public XUnitTest.PrimitiveNullableArrayClass2 Reconstruct(TinyhandSerializerOptions o)
            {
                var v = new XUnitTest.PrimitiveNullableArrayClass2();
                v.Reconstruct(o);
                return v;
            }
        }
    }
}
