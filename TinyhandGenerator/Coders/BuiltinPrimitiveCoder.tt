<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var allTypes = new (string Simple, string Name, string Reconstruct)[]
{
    ("byte", "UInt8", "0"),
    ("sbyte", "Int8", "0"),
    ("ushort", "UInt16", "0"),
    ("short", "Int16", "0"),
    ("uint", "UInt32", "0"),
    ("int", "Int32", "0"),
    ("ulong", "UInt64", "0"),
    ("long", "Int64", "0"),
    ("float", "Single", "0"),
    ("double", "Double", "0"),
    ("bool", "Boolean", "false"),
    ("char", "Char", "(char)0"),
    ("DateTime", "DateTime", "default(DateTime)"),
    };
#>
// Copyright (c) All contributors. All rights reserved. Licensed under the MIT license.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;
using Arc.Visceral;
using Tinyhand.Generator;

#pragma warning disable SA1649 // File name should match first type name

namespace Tinyhand.Coders
{<# foreach(var t in allTypes) {  #>
<# if(t.Name != "String") { #>

    public sealed class <#= t.Name #>Coder : ITinyhandCoder
    {
        public static readonly <#= t.Name #>Coder Instance = new ();

        private <#= t.Name #>Coder()
        {
        }

        public void CodeSerializer(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"writer.Write({ssb.FullObject});");
        }

        public void CodeDeserializer(ScopingStringBuilder ssb, GeneratorInformation info, bool nilChecked)
        {
            ssb.AppendLine($"{ssb.FullObject} = reader.Read<#= t.Name #>();");
        }

        public void CodeReconstruct(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"{ssb.FullObject} = <#= t.Reconstruct #>;");
        }
    }
<# } #>

    public sealed class Nullable<#= t.Name #>Coder : ITinyhandCoder
    {
        public static readonly Nullable<#= t.Name #>Coder Instance = new ();

        private Nullable<#= t.Name #>Coder()
        {
        }

        public void CodeSerializer(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            using (var b = ssb.ScopeBrace($"if (!{ssb.FullObject}.HasValue)"))
            {
                ssb.AppendLine("writer.WriteNil();");
            }

            using (var b = ssb.ScopeBrace($"else"))
            {
                ssb.AppendLine($"writer.Write({ssb.FullObject}!.Value);");
            }
        }

        public void CodeDeserializer(ScopingStringBuilder ssb, GeneratorInformation info, bool nilChecked)
        {
            if (nilChecked)
            {
                ssb.AppendLine($"{ssb.FullObject} = reader.Read<#= t.Name #>();");
            }
            else
            {
                using (var b = ssb.ScopeBrace("if (reader.TryReadNil())"))
                {
                    ssb.AppendLine($"{ssb.FullObject} = default;");
                }

                using (var b = ssb.ScopeBrace($"else"))
                {
                    ssb.AppendLine($"{ssb.FullObject} = reader.Read<#= t.Name #>();");
                }
            }
        }

        public void CodeReconstruct(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"{ssb.FullObject} = <#= t.Reconstruct #>;");
        }
    }
<# if(t.Name != "UInt8") { #>

    public sealed class <#= t.Name #>ArrayCoder : ITinyhandCoder
    {
        public static readonly <#= t.Name #>ArrayCoder Instance = new ();

        private <#= t.Name #>ArrayCoder()
        {
        }

        public void CodeSerializer(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"global::Tinyhand.Formatters.Builtin.Serialize<#= t.Name #>Array(ref writer, {ssb.FullObject});");
        }

        public void CodeDeserializer(ScopingStringBuilder ssb, GeneratorInformation info, bool nilChecked)
        {
            ssb.AppendLine($"{ssb.FullObject} = global::Tinyhand.Formatters.Builtin.Deserialize<#= t.Name #>Array(ref reader) ?? new <#= t.Simple #>[0];");
        }

        public void CodeReconstruct(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"{ssb.FullObject} = new <#= t.Simple #>[0];");
        }
    }

    public sealed class Nullable<#= t.Name #>ArrayCoder : ITinyhandCoder
    {
        public static readonly Nullable<#= t.Name #>ArrayCoder Instance = new ();

        private Nullable<#= t.Name #>ArrayCoder()
        {
        }

        public void CodeSerializer(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"global::Tinyhand.Formatters.Builtin.Serialize<#= t.Name #>Array(ref writer, {ssb.FullObject});");
        }

        public void CodeDeserializer(ScopingStringBuilder ssb, GeneratorInformation info, bool nilChecked)
        {
            ssb.AppendLine($"{ssb.FullObject} = global::Tinyhand.Formatters.Builtin.Deserialize<#= t.Name #>Array(ref reader);");
        }

        public void CodeReconstruct(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"{ssb.FullObject} = new <#= t.Simple #>[0];");
        }
    }

    public sealed class <#= t.Name #>ListCoder : ITinyhandCoder
    {
        public static readonly <#= t.Name #>ListCoder Instance = new ();

        private <#= t.Name #>ListCoder()
        {
        }

        public void CodeSerializer(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"global::Tinyhand.Formatters.Builtin.Serialize<#= t.Name #>List(ref writer, {ssb.FullObject});");
        }

        public void CodeDeserializer(ScopingStringBuilder ssb, GeneratorInformation info, bool nilChecked)
        {
            ssb.AppendLine($"{ssb.FullObject} = global::Tinyhand.Formatters.Builtin.Deserialize<#= t.Name #>List(ref reader) ?? new List<<#= t.Simple #>>();");
        }

        public void CodeReconstruct(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"{ssb.FullObject} = new List<<#= t.Simple #>>();");
        }
    }

    public sealed class Nullable<#= t.Name #>ListCoder : ITinyhandCoder
    {
        public static readonly Nullable<#= t.Name #>ListCoder Instance = new ();

        private Nullable<#= t.Name #>ListCoder()
        {
        }

        public void CodeSerializer(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"global::Tinyhand.Formatters.Builtin.Serialize<#= t.Name #>List(ref writer, {ssb.FullObject});");
        }

        public void CodeDeserializer(ScopingStringBuilder ssb, GeneratorInformation info, bool nilChecked)
        {
            ssb.AppendLine($"{ssb.FullObject} = global::Tinyhand.Formatters.Builtin.Deserialize<#= t.Name #>List(ref reader);");
        }

        public void CodeReconstruct(ScopingStringBuilder ssb, GeneratorInformation info)
        {
            ssb.AppendLine($"{ssb.FullObject} = new List<<#= t.Simple #>>();");
        }
    }
<# } #>
<# } #>
}
